[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 singleRcapture authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Piotr Chlebicki. Author, maintainer. Maciej Beręsewicz. Author, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chlebicki P, Beręsewicz M (2023). singleRcapture: package single-source capture-recapture models. R package version 0.1.3.2, https://github.com/ncn-foreigners/singleRcapture.","code":"@Manual{,   title = {singleRcapture: A package for single-source capture-recapture models},   author = {Piotr Chlebicki and Maciej Beręsewicz},   year = {2023},   note = {R package version 0.1.3.2},   url = {https://github.com/ncn-foreigners/singleRcapture}, }"},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"A package for single-source capture-recapture models","title":"A package for single-source capture-recapture models","text":"Capture-recapture type experiments used estimate total population size situations observing part population feasible. recent years types experiments seen interest. Single source models distinct capture-recapture models estimate population size based many units observed two three sources standard approach. Instead single source models utilise count data regression models positive distributions (.e. counts greater 0) dependent variable number times particular unit observed source data. package aims implement already existing introduce new methods estimating population size single source simplify research process. Currently ’ve implemented frequentist approaches used literature : Zero truncated poisson, geometric negative binomial regression. Zero truncated one inflated one inflated zero truncated poisson gemetric models. (Negative binomial currently development.) Zero one truncated poisson geometric negative binomial models. Generalised Chao Zelterman’s models based logistic regression. Three types bootstrap parametric, semi-parametric non parametric. wide range additional functionalities associated (vector) generalised linear models relevant topic.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A package for single-source capture-recapture models","text":"can install development version singleRcapture GitHub :","code":"# install.packages(\"devtools\") remotes::install_github(\"ncn-foreigners/singleRcapture\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"Installation","what":"Examples","title":"A package for single-source capture-recapture models","text":"main function package estimatePopsize fitts regression specified distribution uses fitted regression estimate population size. Lets look model 2003 publication : Point interval estimation population size using truncated Poisson regression model Heijden, Peter GM van der et al. call estimatePopsize look simmilar anyone used stats::glm function: implemented method plot function visualise model fit usefull diagnostic information. One rootogram, type plot compares fitted observed marginal frequencies:  possible values plotType argument : qq - normal quantile-quantile plot pearson residuals. marginal - matplot comparing fitted observed marginal frequencies. fitresid - plot linear predictor values contrasted pearson residuals. bootHist - histogram bootstrap sample. rootogram - rootogram, example presented . dfpopContr - contrasting two deletion effects identify presence influential observations. dfpopBox - boxplot results dfpopsize function see documentation. scaleLoc - scale-location plot. cooks - plot cooks.values distributions defined. hatplot - plot hatvalues. strata - plot confidence intervals selected su populations. user can also pass arguments specify additional information plot title, subtitle etc. similar calling plot data. info check plot.singleR method documentation. seen significant differences fitted observed marginal frequencies. check intuition let’s perform goodness fit test fitted observed marginal frequencies. call summary function marginalFreq function computes marginal frequencies fitted singleR class object: Finally let us check influential observations. comparing deletion effect every observation population size estimate removing entirely model (population size estimate regression) omitting pop size estimation (called contribution observation). observation influential two actions approximately effect:  easy deduce plot influential observations dataset (one particular). Lastly singleRcapture offers posthoc procedures example function stratifyPopsize estimates sizes user specified sub populations returns data.frame: stratas argument may specified various ways example: singleRcapture package also includes option estimate standard error population size estimate bootstrap common non standard argument significance levels different usual 5%:  models one distribution parameter allow parameters covariate dependent exapmle wish modify model : results significantly different (warning issued concerns second derivative test existence local minimum, inconclusive manually checked fitting process found optimal regression coefficients ’s provide information user):  information criteria support second model:","code":"library(singleRcapture) model <- estimatePopsize(   formula = capture ~ gender + age + nation + reason, # specify formula   data = netherlandsimmigrant,   popVar = \"analytic\", # specify    model = \"ztpoisson\", # distribution used   method = \"IRLS\" # fitting method one of three currently supported ) summary(model) # a summary method for singleR class with standard glm-like output and population size estimation resutls #>  #> Call: #> estimatePopsize(formula = capture ~ gender + age + nation + reason,  #>     data = netherlandsimmigrant, model = \"ztpoisson\", method = \"IRLS\",  #>     popVar = \"analytic\") #>  #> Pearson Residuals: #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -0.488779 -0.486085 -0.297859  0.002075 -0.210439 13.921578  #>  #> Coefficients: #> ----------------------- #> For linear predictors associated with: lambda  #>                      Estimate Std. Error z value  P(>|z|)     #> (Intercept)          -1.33179    0.25486  -5.226 1.74e-07 *** #> gendermale            0.39741    0.16305   2.437 0.014796 *   #> age>40yrs            -0.97463    0.40824  -2.387 0.016969 *   #> nationAsia           -1.09241    0.30164  -3.622 0.000293 *** #> nationNorth Africa    0.18997    0.19400   0.979 0.327471     #> nationRest of Africa -0.91129    0.30097  -3.028 0.002463 **  #> nationSurinam        -2.33665    1.01357  -2.305 0.021146 *   #> nationTurkey         -1.67453    0.60291  -2.777 0.005479 **  #> reasonOther reason   -0.01093    0.16153  -0.068 0.946048     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> AIC: 1714.896 #> BIC: 1764.747 #> Residual deviance: 1128.549 #>  #> Log-likelihood: -848.4481 on 1871 Degrees of freedom  #> Number of iterations: 8 #> ----------------------- #> Population size estimation results:  #> Point estimate 12691.45 #> Observed proportion: 14.8% (N obs = 1880) #> Std. Error 2809.508 #> 95% CI for the population size: #>           lowerBound upperBound #> normal      7184.917   18197.99 #> logNormal   8430.749   19723.38 #> 95% CI for the share of observed population: #>           lowerBound upperBound #> normal     10.330814   26.16592 #> logNormal   9.531836   22.29932 plot(model, plotType = \"rootogram\") summary(marginalFreq(model), df = 2, dropl5 = \"group\") #> Test for Goodness of fit of a regression model: #>  #>                  Test statistics df P(>X^2) #> Chi-squared test           50.06  2 1.4e-11 #> G-test                     34.31  2 3.6e-08 #>  #> --------------------------------------------------------------  #> Cells with fitted frequencies of < 5 have been grouped  #> Names of cells used in calculating test(s) statistic: 1 2 3 plot(model, plotType = \"dfpopContr\") stratifyPopsize(model, alpha = c(.01, .02, .03, .05), # different significance level for each sub population     stratas = list(     \"Females from Surinam\" = netherlandsimmigrant$gender == \"female\" & netherlandsimmigrant$nation == \"Surinam\",     \"Males from Turkey\" = netherlandsimmigrant$gender == \"male\" & netherlandsimmigrant$nation == \"Turkey\",     \"Younger males\" = netherlandsimmigrant$gender == \"male\" & netherlandsimmigrant$age == \"<40yrs\",     \"Older males\" = netherlandsimmigrant$gender == \"male\" & netherlandsimmigrant$age == \">40yrs\" )) #>   Observed Estimated ObservedPercentage  StdError normalLowerBound #> 1       20   932.371           2.145069  956.1229     -1530.438420 #> 2       78  1291.514           6.039425  741.1843      -432.738939 #> 3     1391  7337.175          18.958251 1281.9295      4555.271881 #> 4       91  1542.882           5.898055  782.2326         9.733753 #>   normalUpperBound logNormalLowerBound logNormalUpperBound                 name #> 1         3395.180            119.3464            8398.972 Females from Surinam #> 2         3015.766            405.4748            4574.882    Males from Turkey #> 3        10119.078           5135.1856           10834.174        Younger males #> 4         3076.029            630.7808            3996.215          Older males #>   confLevel #> 1      0.01 #> 2      0.02 #> 3      0.03 #> 4      0.05 stratifyPopsize(model, stratas = ~ gender / age) #>   Observed Estimated ObservedPercentage  StdError normalLowerBound #> 1      398 3811.3954          10.442370 1154.7825      1548.063241 #> 2     1482 8880.0563          16.689083 1812.6286      5327.369600 #> 3      378 3169.5475          11.925992  881.2932      1442.244687 #> 4     1391 7337.1748          18.958251 1281.9295      4824.639108 #> 5       20  641.8478           3.116003  408.1451      -158.101825 #> 6       91 1542.8815           5.898055  782.2326         9.733753 #>   normalUpperBound logNormalLowerBound logNormalUpperBound #> 1         6074.727           2188.5341            6905.147 #> 2        12432.743           6090.8584           13357.226 #> 3         4896.850           1903.7278            5485.554 #> 4         9849.710           5306.6899           10420.570 #> 5         1441.797            212.4088            2029.756 #> 6         3076.029            630.7808            3996.215 #>                     name confLevel #> 1         gender==female      0.05 #> 2           gender==male      0.05 #> 3 genderfemale:age<40yrs      0.05 #> 4   gendermale:age<40yrs      0.05 #> 5 genderfemale:age>40yrs      0.05 #> 6   gendermale:age>40yrs      0.05 set.seed(123) modelInflated <- estimatePopsize(     formula = capture ~ nation + gender + age,     data = netherlandsimmigrant,     popVar = \"bootstrap\",     model = \"oiztgeom\",     method = \"IRLS\",     controlMethod = controlMethod(stepsize = .2), # control parameters for regression fitting check documentation of controlMethod     controlPopVar = controlPopVar( # control parameters for population size estimation check documentation of controlPopVar         B = 1250, # number of boostrap samples         alpha = .01, # significance level          bootType = \"semiparametric\" # type of bootstrap see documentation for estimatePopsize     ) ) summary(modelInflated) #>  #> Call: #> estimatePopsize(formula = capture ~ nation + gender + age, data = netherlandsimmigrant,  #>     model = \"oiztgeom\", method = \"IRLS\", popVar = \"bootstrap\",  #>     controlMethod = controlMethod(stepsize = 0.2), controlPopVar = controlPopVar(B = 1250,  #>         alpha = 0.01, bootType = \"semiparametric\")) #>  #> Pearson Residuals: #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -0.416300 -0.416300 -0.292541  0.004086 -0.188313 13.733512  #>  #> Coefficients: #> ----------------------- #> For linear predictors associated with: lambda  #>                      Estimate Std. Error z value  P(>|z|)     #> (Intercept)           -1.5518     0.2395  -6.480 9.19e-11 *** #> nationAsia            -0.8294     0.2573  -3.224  0.00126 **  #> nationNorth Africa     0.2082     0.1854   1.123  0.26147     #> nationRest of Africa  -0.6800     0.2578  -2.638  0.00834 **  #> nationSurinam         -1.5370     0.6403  -2.401  0.01637 *   #> nationTurkey          -1.1880     0.4336  -2.740  0.00614 **  #> gendermale             0.3145     0.1466   2.145  0.03194 *   #> age>40yrs             -0.6692     0.3116  -2.148  0.03171 *   #> ----------------------- #> For linear predictors associated with: omega  #>             Estimate Std. Error z value  P(>|z|)     #> (Intercept)  -2.2241     0.4556  -4.882 1.05e-06 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> AIC: 1676.961 #> BIC: 1726.813 #> Residual deviance: 941.3779 #>  #> Log-likelihood: -829.4807 on 3751 Degrees of freedom  #> Number of iterations: 52 #> ----------------------- #> Population size estimation results:  #> Point estimate 7559.606 #> Observed proportion: 24.9% (N obs = 1880) #> Boostrap sample skewness: 0.3109832 #> 0 skewness is expected for normally distributed vairable #> --- #> Bootstrap Std. Error 3194.534 #> 99% CI for the population size: #> lowerBound upperBound  #>   4517.296  18967.029  #> 99% CI for the share of observed population: #> lowerBound upperBound  #>   9.911937  41.617818 plot(modelInflated, plotType = \"bootHist\", labels = TRUE, ylim = c(0, 300)) modelInflated2 <- estimatePopsize(     formula = capture ~ nation  + age,     data = netherlandsimmigrant,     popVar = \"bootstrap\",     model = \"oiztgeom\",     method = \"IRLS\",     controlMethod = controlMethod(stepsize = .2),     controlPopVar = controlPopVar(         B = 1250,         alpha = .01,         bootType = \"semiparametric\",         covType = \"Fisher\" # use fisher information matrix to construct cross covariance matrix instead of observed information matrix     ),     controlModel = controlModel(omegaFormula = ~ gender) # put covariates on omega i.e. the inflation parameter ) #> Warning in estimatePopsize(formula = capture ~ nation + age, data = netherlandsimmigrant, : The (analytically computed) hessian of the score function is not negative define. #> NOTE: Second derivative test failing does not necessarily mean that the maximum of score function that was found numericaly is invalid since R^k is not a bounded space. #> Additionally in one inflated and hurdle models second derivative test often fails even on valid arguments. plot(modelInflated2, plotType = \"bootHist\", labels = TRUE, ylim = c(0, 220)) cat(\" First model: AIC = \", AIC(modelInflated), \" BIC = \", BIC(modelInflated),     \"\\nSecond model: AIC = \", AIC(modelInflated2), \" BIC = \", BIC(modelInflated2), \"\\n\", sep = \"\") #>  First model: AIC = 1676.961 BIC = 1726.813 #> Second model: AIC = 1675.318 BIC = 1725.169"},{"path":"/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"A package for single-source capture-recapture models","text":"Work package supported National Science Center, OPUS 22 grant . 2020/39/B/HS4/00941.","code":""},{"path":"/reference/bread.singleR.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting bread matrix for singleR class — bread.singleR","title":"Extracting bread matrix for singleR class — bread.singleR","text":"Extracting bread matrix singleR class","code":""},{"path":"/reference/bread.singleR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting bread matrix for singleR class — bread.singleR","text":"","code":"# S3 method for singleR bread(object, ...)"},{"path":"/reference/bread.singleR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting bread matrix for singleR class — bread.singleR","text":"object object representing fitted model. ... additional optional arguments passed following functions: stats::vcov -- extracting \"usual\" variance-covariance matrix, vcov.singleR one additional argument type values \"Fisher\" \"observedInform\", defaults one specified controlPopVar specified call object.","code":""},{"path":"/reference/bread.singleR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting bread matrix for singleR class — bread.singleR","text":"bread matrix, .e. hessian based estimation variance-covariance matrix scaled degrees freedom.","code":""},{"path":[]},{"path":"/reference/bread.singleR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracting bread matrix for singleR class — bread.singleR","text":"Piotr Chlebicki, Maciej Beręsewicz S3class sandwich::bread handle singleR objects. function developed based sandwich:::bread.glm","code":""},{"path":"/reference/bread.singleR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting bread matrix for singleR class — bread.singleR","text":"","code":"Model <- estimatePopsize( formula = capture ~ .,  data = netherlandsimmigrant,  model = ztpoisson,  method = \"IRLS\") sandwich::bread(Model) #>                      (Intercept) gendermale   age>40yrs reasonOther reason #> (Intercept)            122.10868 -34.311532 -10.9034770        -41.6072585 #> gendermale             -34.31153  49.979685  -2.5603625         -1.0221200 #> age>40yrs              -10.90348  -2.560362 313.3232550          0.1153169 #> reasonOther reason     -41.60726  -1.022120   0.1153169         49.0525800 #> nationAsia             -56.25448  -6.805030   6.9235321         -0.8766691 #> nationNorth Africa     -55.61099  -9.030616   8.2485110          0.1373466 #> nationRest of Africa   -60.88260  -4.806497   4.5385472          2.9626704 #> nationSurinam          -60.40757  -2.801890  -3.5269990          1.1476629 #> nationTurkey           -51.41920  -9.448466  -2.1998382         -3.8913678 #>                       nationAsia nationNorth Africa nationRest of Africa #> (Intercept)          -56.2544755        -55.6109935           -60.882602 #> gendermale            -6.8050296         -9.0306164            -4.806497 #> age>40yrs              6.9235321          8.2485110             4.538547 #> reasonOther reason    -0.8766691          0.1373466             2.962670 #> nationAsia           171.0514100         62.9320747            62.223177 #> nationNorth Africa    62.9320747         70.7547976            62.510353 #> nationRest of Africa  62.2231766         62.5103529           170.291804 #> nationSurinam         61.8198398         61.9519618            61.820909 #> nationTurkey          62.8528821         63.1825931            62.171390 #>                      nationSurinam nationTurkey #> (Intercept)             -60.407570   -51.419195 #> gendermale               -2.801890    -9.448466 #> age>40yrs                -3.526999    -2.199838 #> reasonOther reason        1.147663    -3.891368 #> nationAsia               61.819840    62.852882 #> nationNorth Africa       61.951962    63.182593 #> nationRest of Africa     61.820909    62.171390 #> nationSurinam          1931.372466    62.008295 #> nationTurkey             62.008295   683.378471 vcov(Model) #>                       (Intercept)    gendermale     age>40yrs #> (Intercept)           0.064951423 -0.0182508147 -5.799722e-03 #> gendermale           -0.018250815  0.0265849388 -1.361895e-03 #> age>40yrs            -0.005799722 -0.0013618949  1.666613e-01 #> reasonOther reason   -0.022131520 -0.0005436809  6.133879e-05 #> nationAsia           -0.029922593 -0.0036196966  3.682730e-03 #> nationNorth Africa   -0.029580316 -0.0048035194  4.387506e-03 #> nationRest of Africa -0.032384363 -0.0025566472  2.414121e-03 #> nationSurinam        -0.032131686 -0.0014903669 -1.876063e-03 #> nationTurkey         -0.027350636 -0.0050257797 -1.170127e-03 #>                      reasonOther reason    nationAsia nationNorth Africa #> (Intercept)               -2.213152e-02 -0.0299225934      -2.958032e-02 #> gendermale                -5.436809e-04 -0.0036196966      -4.803519e-03 #> age>40yrs                  6.133879e-05  0.0036827298       4.387506e-03 #> reasonOther reason         2.609180e-02 -0.0004663133       7.305668e-05 #> nationAsia                -4.663133e-04  0.0909847926       3.347451e-02 #> nationNorth Africa         7.305668e-05  0.0334745078       3.763553e-02 #> nationRest of Africa       1.575889e-03  0.0330974344       3.325019e-02 #> nationSurinam              6.104590e-04  0.0328828935       3.295317e-02 #> nationTurkey              -2.069876e-03  0.0334323841       3.360776e-02 #>                      nationRest of Africa nationSurinam nationTurkey #> (Intercept)                  -0.032384363  -0.032131686 -0.027350636 #> gendermale                   -0.002556647  -0.001490367 -0.005025780 #> age>40yrs                     0.002414121  -0.001876063 -0.001170127 #> reasonOther reason            0.001575889   0.000610459 -0.002069876 #> nationAsia                    0.033097434   0.032882893  0.033432384 #> nationNorth Africa            0.033250188   0.032953171  0.033607762 #> nationRest of Africa          0.090580747   0.032883462  0.033069888 #> nationSurinam                 0.032883462   1.027325780  0.032983136 #> nationTurkey                  0.033069888   0.032983136  0.363499187 # This function just scales. all(vcov(Model) * nrow(netherlandsimmigrant) == sandwich::bread(Model)) #> [1] TRUE # We can choose Fisher information matrix instead of default observed information matrix. vcov(Model, \"Fisher\") #>                       (Intercept)    gendermale     age>40yrs #> (Intercept)           0.064951423 -0.0182508146 -5.799722e-03 #> gendermale           -0.018250815  0.0265849387 -1.361895e-03 #> age>40yrs            -0.005799722 -0.0013618949  1.666613e-01 #> reasonOther reason   -0.022131520 -0.0005436809  6.133875e-05 #> nationAsia           -0.029922593 -0.0036196966  3.682730e-03 #> nationNorth Africa   -0.029580316 -0.0048035193  4.387506e-03 #> nationRest of Africa -0.032384363 -0.0025566472  2.414121e-03 #> nationSurinam        -0.032131686 -0.0014903669 -1.876063e-03 #> nationTurkey         -0.027350636 -0.0050257797 -1.170127e-03 #>                      reasonOther reason    nationAsia nationNorth Africa #> (Intercept)               -2.213152e-02 -0.0299225934      -2.958032e-02 #> gendermale                -5.436809e-04 -0.0036196966      -4.803519e-03 #> age>40yrs                  6.133875e-05  0.0036827298       4.387506e-03 #> reasonOther reason         2.609180e-02 -0.0004663133       7.305668e-05 #> nationAsia                -4.663133e-04  0.0909847926       3.347451e-02 #> nationNorth Africa         7.305668e-05  0.0334745078       3.763553e-02 #> nationRest of Africa       1.575889e-03  0.0330974344       3.325019e-02 #> nationSurinam              6.104590e-04  0.0328828935       3.295317e-02 #> nationTurkey              -2.069876e-03  0.0334323841       3.360776e-02 #>                      nationRest of Africa nationSurinam nationTurkey #> (Intercept)                  -0.032384363  -0.032131686 -0.027350636 #> gendermale                   -0.002556647  -0.001490367 -0.005025780 #> age>40yrs                     0.002414121  -0.001876063 -0.001170127 #> reasonOther reason            0.001575889   0.000610459 -0.002069876 #> nationAsia                    0.033097434   0.032882893  0.033432384 #> nationNorth Africa            0.033250188   0.032953171  0.033607762 #> nationRest of Africa          0.090580747   0.032883462  0.033069888 #> nationSurinam                 0.032883462   1.027324675  0.032983136 #> nationTurkey                  0.033069888   0.032983136  0.363499187 sandwich::bread(Model, type = \"Fisher\") #>                      (Intercept) gendermale   age>40yrs reasonOther reason #> (Intercept)            122.10868 -34.311531 -10.9034769        -41.6072583 #> gendermale             -34.31153  49.979685  -2.5603625         -1.0221200 #> age>40yrs              -10.90348  -2.560362 313.3232522          0.1153168 #> reasonOther reason     -41.60726  -1.022120   0.1153168         49.0525798 #> nationAsia             -56.25448  -6.805030   6.9235321         -0.8766691 #> nationNorth Africa     -55.61099  -9.030616   8.2485110          0.1373466 #> nationRest of Africa   -60.88260  -4.806497   4.5385472          2.9626704 #> nationSurinam          -60.40757  -2.801890  -3.5269989          1.1476629 #> nationTurkey           -51.41920  -9.448466  -2.1998381         -3.8913678 #>                       nationAsia nationNorth Africa nationRest of Africa #> (Intercept)          -56.2544756        -55.6109936           -60.882602 #> gendermale            -6.8050296         -9.0306164            -4.806497 #> age>40yrs              6.9235321          8.2485110             4.538547 #> reasonOther reason    -0.8766691          0.1373466             2.962670 #> nationAsia           171.0514100         62.9320747            62.223177 #> nationNorth Africa    62.9320747         70.7547976            62.510353 #> nationRest of Africa  62.2231766         62.5103529           170.291804 #> nationSurinam         61.8198398         61.9519618            61.820909 #> nationTurkey          62.8528821         63.1825931            62.171390 #>                      nationSurinam nationTurkey #> (Intercept)             -60.407570   -51.419195 #> gendermale               -2.801890    -9.448466 #> age>40yrs                -3.526999    -2.199838 #> reasonOther reason        1.147663    -3.891368 #> nationAsia               61.819840    62.852882 #> nationNorth Africa       61.951962    63.182593 #> nationRest of Africa     61.820909    62.171390 #> nationSurinam          1931.370389    62.008295 #> nationTurkey             62.008295   683.378471 all(vcov(Model, \"Fisher\") * nrow(netherlandsimmigrant) == sandwich::bread(Model, type = \"Fisher\")) #> [1] TRUE"},{"path":"/reference/carcassubmission.html","id":null,"dir":"Reference","previous_headings":"","what":"British farm carcass submissions data — carcassubmission","title":"British farm carcass submissions data — carcassubmission","text":"Data British animal farms submissions AHVLA. British farms able submit samples AHVLA cause death animal determined private veterinary surgeon decides submit , unless notifiable disease suspected submission required. data set contains information farms. submissions included data frame submissions carcasses .e. submissions blood samples etc. excluded.","code":""},{"path":"/reference/carcassubmission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"British farm carcass submissions data — carcassubmission","text":"","code":"data(\"carcassubmission\")"},{"path":"/reference/carcassubmission.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"British farm carcass submissions data — carcassubmission","text":"Data frame 1,858 rows 4 columns. TOTAL_SUB Number submissions animal carcasses. log_size Numerical value equal logarithm size farm. log_distance Numerical value equal logarith distance nearest AHVLA center. C_TYPE Factor describing type activity farm animals used . Either Dairy Beef","code":""},{"path":"/reference/carcassubmission.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"British farm carcass submissions data — carcassubmission","text":"data set description provided publication: Böhning, D., Vidal Diez, ., Lerdsuwansri, R., Viwatwongkasem, C., Arnold, M. (2013). \"generalization Chao's estimator covariate information\". Biometrics, 69(4), 1033-1042. doi:10.1111/biom.12082","code":""},{"path":"/reference/confint.singleR.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for Model Parameters — confint.singleR","title":"Confidence Intervals for Model Parameters — confint.singleR","text":"function computes studentized confidence intervals model coefficients.","code":""},{"path":"/reference/confint.singleR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for Model Parameters — confint.singleR","text":"","code":"# S3 method for singleR confint(object, parm, level = 0.95, ...)"},{"path":"/reference/confint.singleR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for Model Parameters — confint.singleR","text":"object Object singleR class. parm Names parameters confidence intervals computed, missing parameters considered. level Confidence level intervals. ... Currently nothing.","code":""},{"path":"/reference/confint.singleR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for Model Parameters — confint.singleR","text":"object named columns include upper lower limit confidence intervals.","code":""},{"path":"/reference/controlMethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Control parameters for regression — controlMethod","title":"Control parameters for regression — controlMethod","text":"controlMethod constructs list necessary control parameters regression fitting estimatePopsize.fit estimatePopsize.","code":""},{"path":"/reference/controlMethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control parameters for regression — controlMethod","text":"","code":"controlMethod(   epsilon = 1e-08,   maxiter = 1000,   verbose = 0,   printEveryN = 1,   start = NULL,   alphaStart = NULL,   omegaStart = NULL,   piStart = NULL,   optimMethod = \"L-BFGS-B\",   silent = FALSE,   optimPass = FALSE,   stepsize = 1,   checkDiagWeights = TRUE,   weightsEpsilon = .Machine$double.eps^0.75,   momentumFactor = 0,   saveIRLSlogs = FALSE,   useZtpoissonAsStart = FALSE,   momentumActivation = 5,   criterion = c(\"coef\", \"abstol\", \"reltol\") )"},{"path":"/reference/controlMethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control parameters for regression — controlMethod","text":"epsilon Tolerance fitting algorithms default 1e-8. maxiter Maximum number iterations. verbose Value indicating whether trace steps fitting algorithm IRLS fitting method different values verbose give following information: 1 -- Returns information number current iteration current log-likelihood. 2 -- Returns information vector regression parameters current iteration (). 3 -- Returns information reduction log-likelihood current iteration (). 4 -- Returns information value log-likelihood function gradient current iteration (). 5 -- Returns information convergence criterion values taken account considering convergence (). optim method chosen verbose passed stats::optim() trace. printEveryN Integer value indicating often print information specified verbose, default set 1. start initial parameters regression associated main formula specified function call NULL derived simple poisson regression. alphaStart initial parameters dispersion parameter applies. omegaStart initial parameters inflation parameter applies. piStart initial parameters probability parameter applies. optimMethod method stats::optim() used L-BFGS-B default except negative binomial one inflated models Nelder-Mead used. silent Logical, indicating whether warnings IRLS method suppressed. optimPass Optional list parameters passed stats::optim(..., control = optimPass) FALSE list control parameters inferred parameters. stepsize IRLS, scaling stepsize lower value means slower convergence accuracy default 1. general fitting algorithm fails lowering value tends effective correcting . checkDiagWeights Logical value indicating whether check diagonal elements working weights matrixes IRLS sufficiently positive matrixes positive defined. default TRUE. weightsEpsilon Small number ensure positivity weights matrixes. matters checkDiagWeights set TRUE. default \\(\\approx 1.818989\\cdot 10^{-12}\\) momentumFactor Experimental parameter IRLS allowing taking previous step account current step, .e instead updating regression parameters : \\[\\boldsymbol{\\beta}_{()} = \\boldsymbol{\\beta}_{(-1)} + \\text{stepsize}  \\cdot \\text{step}_{()}\\] update made : \\[\\boldsymbol{\\beta}_{()} = \\boldsymbol{\\beta}_{(-1)} + \\text{stepsize}  \\cdot (\\text{step}_{()} + \\text{momentum}\\cdot\\text{step}_{(-1)})\\] saveIRLSlogs Logical value indicating information specified verbose saved output object, default FALSE. useZtpoissonAsStart boolean value indicating whether chose starting parameters ztpoisson regression one useful mostly various one inflated models. momentumActivation value log-likelihood reduction bellow momentum apply. criterion Criterion used determine convergence IRLS, multiple values may provided. default c(\"coef\", \"abstol\").","code":""},{"path":"/reference/controlMethod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control parameters for regression — controlMethod","text":"List selected parameters, also possible call list directly.","code":""},{"path":[]},{"path":"/reference/controlMethod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control parameters for regression — controlMethod","text":"Piotr Chlebicki, Maciej Beręsewicz","code":""},{"path":"/reference/controlModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Control parameters specific to some models — controlModel","title":"Control parameters specific to some models — controlModel","text":"controlModel constructs list necessary control parameters estimatePopsize either specific selected model fit anywhere else. Specifying additional formulas done using right hand side formula also now variables additional formulas also included \"main\" formula.","code":""},{"path":"/reference/controlModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control parameters specific to some models — controlModel","text":"","code":"controlModel(   weightsAsCounts = FALSE,   omegaFormula = ~1,   alphaFormula = ~1,   piFormula = ~1 )"},{"path":"/reference/controlModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control parameters specific to some models — controlModel","text":"weightsAsCounts now nothing. plan indicate whether prior.weights treated counts sub populations adjust necessary methods functionalities, like adjustments bootstrap decreasing weights dfbeta instead deleting rows data, accommodate form data. omegaFormula Formula inflation parameter one inflated zero truncated zero truncated one inflated models. alphaFormula Formula dispersion parameter negative binomial based models. piFormula Formula probability parameter pseudo hurdle zero truncated zero truncated pseudo hurdle models.","code":""},{"path":"/reference/controlModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control parameters specific to some models — controlModel","text":"list selected parameters, also possible call list directly.","code":""},{"path":[]},{"path":"/reference/controlModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control parameters specific to some models — controlModel","text":"Piotr Chlebicki, Maciej Beręsewicz","code":""},{"path":"/reference/controlPopVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Control parameters for population size estimation — controlPopVar","title":"Control parameters for population size estimation — controlPopVar","text":"Creating control parameters population size estimation respective standard error variance estimation.","code":""},{"path":"/reference/controlPopVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control parameters for population size estimation — controlPopVar","text":"","code":"controlPopVar(   alpha = 0.05,   trcount = 0,   bootType = c(\"parametric\", \"semiparametric\", \"nonparametric\"),   B = 500,   confType = c(\"percentilic\", \"normal\", \"basic\"),   keepbootStat = TRUE,   traceBootstrapSize = FALSE,   bootstrapVisualTrace = FALSE,   fittingMethod = NULL,   bootstrapFitcontrol = NULL,   sd = c(\"sqrtVar\", \"normalMVUE\"),   covType = c(\"observedInform\", \"Fisher\") )"},{"path":"/reference/controlPopVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control parameters for population size estimation — controlPopVar","text":"alpha Significance level, 0.05 used default. trcount Truncated count - number added point estimator sides confidence intervals. bootType Bootstrap type. Default \"parametric\", possible values : \"semiparametric\" \"nonparametric\". B Number bootstrap samples performed (default 500). confType Type confidence interval bootstrap confidence interval, \"percentile\" default. possibility: \"studentized\" \"basic\". keepbootStat Boolean value indicating whether keep vector statistics produced bootstrap. traceBootstrapSize Boolean value indicating whether print size bootstrapped sample truncation semi- fully parametric bootstraps. bootstrapVisualTrace Boolean value indicating whether plot bootstrap statistics real time. fittingMethod Method used fitting models bootstrap samples. bootstrapFitcontrol Control parameters regression works exactly like controlMethod fitting models bootstrap samples. sd Indicates compute standard deviation population size estimator either :   \\[\\hat{\\sigma}=\\sqrt{\\hat{\\text{var}}(\\hat{N})}\\] sqrt normalMVUE unbiased minimal variance estimator normal distribution: \\[\\hat{\\sigma}=\\sqrt{\\hat{\\text{var}}(\\hat{N})}\\frac{\\Gamma\\left((N_{obs}-1)/2\\right)}{\\Gamma\\left(N_{obs}/2\\right)}\\sqrt{\\frac{N_{obs}}{2}}\\] ration involving gamma functions computed loggamma function. covType type covariance matrix regression parameters default observed information matrix, options future.","code":""},{"path":"/reference/controlPopVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control parameters for population size estimation — controlPopVar","text":"list selected parameters, also possible call list directly.","code":""},{"path":[]},{"path":"/reference/controlPopVar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control parameters for population size estimation — controlPopVar","text":"Piotr Chlebicki, Maciej Beręsewicz","code":""},{"path":"/reference/dfbetasingleR.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression deletion diagnostics.\n — dfbetasingleR","title":"Regression deletion diagnostics.\n — dfbetasingleR","text":"dfbeta method singleR class.","code":""},{"path":"/reference/dfbetasingleR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression deletion diagnostics.\n — dfbetasingleR","text":"","code":"dfbetasingleR(model, maxitNew = 1, ...)"},{"path":"/reference/dfbetasingleR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression deletion diagnostics.\n — dfbetasingleR","text":"model Fitted object singleR class maxitNew Maximal number iterations regressions starting points \\(\\hat{\\boldsymbol{\\beta}}\\) data specified call model romoval kth row. default 1. ... Additional optional arguments passed following functions: controlMethod -- controlling simulation dfbeta.","code":""},{"path":"/reference/dfbetasingleR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression deletion diagnostics.\n — dfbetasingleR","text":"matrix n rows p observations p number units data p number regression parameters. K'th row matrix corresponds \\(\\hat{\\boldsymbol{\\beta}}-\\hat{\\boldsymbol{\\beta}}_{-k}\\)\\(\\hat{\\boldsymbol{\\beta}}_{-k}\\) vector estimates regression parameters removal k'th row data.","code":""},{"path":"/reference/dfpopsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression deletion diagnostics for Population size estimation. — dfpopsize","title":"Regression deletion diagnostics for Population size estimation. — dfpopsize","text":"dfpopsize population size estimation.","code":""},{"path":"/reference/dfpopsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression deletion diagnostics for Population size estimation. — dfpopsize","text":"","code":"dfpopsize(model, ...)  # S3 method for singleR dfpopsize(model, dfbeta = NULL, observedPop = FALSE, ...)"},{"path":"/reference/dfpopsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression deletion diagnostics for Population size estimation. — dfpopsize","text":"model Model leave one diagnostic popsize done. ... Additional optional arguments passed following functions (singleR class): dfbetas -- dfbeta parameter provided. dfbeta dfbeta already obtained possible pass function need computed second time. observedPop Logical. singleR class object set TRUE indicates 1 returned units take part population size estimation (e.g. 1's zero one truncated models units count => 3 zelterman basic chao model) set FALSE (default) units included results.","code":""},{"path":"/reference/dfpopsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression deletion diagnostics for Population size estimation. — dfpopsize","text":"vector k'th element corresponds difference point estimate population size estimation full data set point estimate population size estimation removal k'th unit data set.","code":""},{"path":"/reference/dfpopsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression deletion diagnostics for Population size estimation. — dfpopsize","text":"","code":"if (FALSE) { # For singleR class # Get simple model Model <- estimatePopsize(formula = capture ~ nation + age + gender,  data = netherlandsimmigrant,  model = ztpoisson,  method = \"IRLS\") # Get df beta dfb <- dfbeta(Model) # The results dfpopsize(Model, dfbeta = dfb) # It is also possible to not provide dfbeta then they will be # computed manually dfpopsize(Model) }"},{"path":"/reference/estfun.singleR.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical Estimating Functions — estfun.singleR","title":"Empirical Estimating Functions — estfun.singleR","text":"Empirical Estimating Functions","code":""},{"path":"/reference/estfun.singleR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical Estimating Functions — estfun.singleR","text":"","code":"# S3 method for singleR estfun(object, ...)"},{"path":"/reference/estfun.singleR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical Estimating Functions — estfun.singleR","text":"object object representing fitted model. ... additional optional arguments.","code":""},{"path":"/reference/estfun.singleR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical Estimating Functions — estfun.singleR","text":"matrix n rows k columns k denotes number variables.","code":""},{"path":[]},{"path":"/reference/estfun.singleR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Empirical Estimating Functions — estfun.singleR","text":"Piotr Chlebicki, Maciej Beręsewicz S3method sandwich::estfun handle singleR objects.","code":""},{"path":"/reference/estfun.singleR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical Estimating Functions — estfun.singleR","text":"","code":"set.seed(1) N <- 10000 gender <- rbinom(N, 1, 0.2) eta <- -1 + 0.5*gender counts <- rpois(N, lambda = exp(eta)) df <- data.frame(gender, eta, counts) df2 <- subset(df, counts > 0) mod1 <-  estimatePopsize(formula = counts ~ 1 + gender, data = df2,  model = \"ztpoisson\", method = \"optim\", popVar = \"analytic\") mod1_sims <- sandwich::estfun(mod1) head(mod1_sims)  #>   (Intercept)    gender #> 1  -0.1924342 0.0000000 #> 2   0.6700925 0.6700925 #> 3  -0.1924342 0.0000000 #> 4  -0.1924342 0.0000000 #> 5  -0.1924342 0.0000000 #> 6  -0.1924342 0.0000000"},{"path":"/reference/estimatePopsize.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression fitting in single source capture-recapture models — estimatePopsize.fit","title":"Regression fitting in single source capture-recapture models — estimatePopsize.fit","text":"estimatePopsize.fit estimatePopsize glm.fit glm. internally called estimatePopsize. Since estimatePopsize much just regression fitting estimatePopsize.fit much faster.","code":""},{"path":"/reference/estimatePopsize.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression fitting in single source capture-recapture models — estimatePopsize.fit","text":"","code":"estimatePopsize.fit(y, X, family, control, method, priorWeights, start, ...)"},{"path":"/reference/estimatePopsize.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression fitting in single source capture-recapture models — estimatePopsize.fit","text":"y vector dependent variables. X model matrix, vglm one. family model estimatePopsize. control control parameters created controlModel. method method estimation estimatePopsize. priorWeights vector prior weights argument weights estimatePopsize. start initial value regression parameters. ... arguments pass methods.","code":""},{"path":"/reference/estimatePopsize.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression fitting in single source capture-recapture models — estimatePopsize.fit","text":"List regression parameters, working weights (IRLS fitting method) chosen number iterations taken.","code":""},{"path":"/reference/estimatePopsize.fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression fitting in single source capture-recapture models — estimatePopsize.fit","text":"method argument set \"optim\" stats::optim function used fit regression analyticly computed gradient (minus) log likelihood functions gr fn arguments. Unfortunately optim allow hessian specified. information modify optim fitting included controlMethod(). method argument set \"IRLS\" iteratively reweighted least squares. algorithm well know generalised linear models. Thomas W. Yee later extended algorithm vector generalised linear models general terms can roughly described (Yee's description changing conventions): Initialise : converged <- FALSE iter <- 1 \\(\\boldsymbol{\\beta}\\) <- start \\(\\boldsymbol{W}\\) <- prior \\(\\ell\\) <- \\(\\ell(\\boldsymbol{\\beta})\\) converged iter > Maxiter move step 7. Store values previous algorithm step: \\(\\boldsymbol{W}_{-}\\) <- \\(\\boldsymbol{W}\\) \\(\\ell_{-}\\) <- \\(\\ell\\) \\(\\boldsymbol{\\beta}_{-}\\) <- \\(\\boldsymbol{\\beta}\\) assign values current step: \\(\\boldsymbol{\\eta}\\) <- \\(\\boldsymbol{X}_{vlm}\\boldsymbol{\\beta}\\) \\(Z_{}\\) <- \\(\\eta_{}+\\frac{\\partial\\ell_{}}{\\partial\\eta_{}}\\mathbb{E}\\left(\\frac{\\partial^{2}\\ell_{}}{\\partial\\eta_{}^{T}\\partial\\eta_{}}\\right)^{-1}\\) \\(\\boldsymbol{W}_{ij}\\) <- \\(\\mathbb{E}\\left(\\frac{\\partial^{2}\\ell}{\\partial\\boldsymbol{\\eta}_{j}^{T}\\partial\\boldsymbol{\\eta}_{}}\\right)\\) \\(\\ell_{}\\) ith component log likelihood function, \\(\\eta_{}\\) vector linear predictors associated ith row  \\(\\mathbb{E}\\left(\\frac{\\partial^{2}\\ell_{}}{\\partial\\eta_{}^{T}\\partial\\eta_{}}\\right)\\) corresponds weights associated ith row \\(\\boldsymbol{W}\\) block matrix, made diagonal matrixes \\(\\mathbb{E}\\left(\\frac{\\partial^{2}\\ell}{\\partial\\boldsymbol{\\eta}_{j}^{T}\\partial\\boldsymbol{\\eta}_{}}\\right)\\). Regress \\(\\boldsymbol{Z}\\) \\(\\boldsymbol{X}_{vlm}\\) obtain \\(\\boldsymbol{\\beta}\\) : \\[\\boldsymbol{\\beta}=\\left(\\boldsymbol{X}_{vlm}^{T}\\boldsymbol{W}\\boldsymbol{X}_{vlm}\\right)^{-1}\\boldsymbol{X}_{vlm}^{T}\\boldsymbol{W}\\boldsymbol{Z}\\] Assign: converged <- \\(\\ell(\\boldsymbol{\\beta})-\\ell_{-} \\(||\\boldsymbol{\\beta}-\\boldsymbol{\\beta}_{-}||_{\\infty} iter <- iter + 1 \\(\\varepsilon\\) relative tolerance level, default 1e-8. Return step 2. Return \\(\\boldsymbol{\\beta}, \\boldsymbol{W}\\), iter. package use different conventions \\(\\boldsymbol{X}_vlm\\) matrix hence slight differences present algorithm description results identical.","code":""},{"path":"/reference/estimatePopsize.fit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Regression fitting in single source capture-recapture models — estimatePopsize.fit","text":"Yee, T. W. (2015). Vector Generalized Linear Additive Models: Implementation R. New York, USA: Springer. ISBN 978-1-4939-2817-0.","code":""},{"path":[]},{"path":"/reference/estimatePopsize.fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression fitting in single source capture-recapture models — estimatePopsize.fit","text":"Piotr Chlebicki, Maciej Beręsewicz","code":""},{"path":"/reference/estimatePopsize.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression fitting in single source capture-recapture models — estimatePopsize.fit","text":"","code":"# Set seed for reproducibility set.seed(123)  # Set population size and 'true' regression coefficients N <- 7562 beta1 <- c(1, .2, -.95, -3) beta2 <- c(2, 0, -.01, .3)  # Generate covariates x1 <- rpois(n = N, lambda = 1.85) x2 <- rnorm(n = N) x3 <- rbinom(n = N, size = 1, prob = runif(n = 1))  # Compute linear predictors eta1 <- cbind(1, x1, x2, x3) %*% beta1 eta2 <- cbind(1, x1, x2, x3) %*% beta2  # generate dependent variable y <- ztoipoisson()$simulate(n = N, eta = cbind(eta1, eta2)) # optionally visualise destribution on y with barplot # barplot(table(y)) # truncate data x1 <- x1[y>0] x2 <- x2[y>0] x3 <- x3[y>0] y <- y[y>0]  # construct vglm model matrix X <- matrix(data = 0, nrow = 2 * length(y), ncol = 8) X[1:length(y), 1:4] <- model.matrix(~ 1 + x1 + x2 + x3) X[-(1:length(y)), 5:8] <- X[1:length(y), 1:4] # this arrtibute tells the function which elements of the design matrix  # correspond to which linear predictor  attr(X, \"hwm\") <- c(4, 4)  # finally call the function beta <- c(beta1, beta2)  res <- estimatePopsize.fit(   y = y, X = X,    method = \"IRLS\",    priorWeights = 1,    family = ztoipoisson(),    control = controlMethod(verbose = 5),    start = beta + rnorm(n = length(beta), sd = .1) ) #> Iteration number 1 log-likelihood: -24744.076 #> Parameter vector:  -10.32608769   0.58037475  -1.33218497   8.36264342  -4.15462875   1.00033619  -1.63224339   5.90341582 #> log-likelihood reduction:  -22645.89 #> Value of gradient at current step: #>   2008.841853  3991.135030 -2052.038101  -512.014214  -163.400825  -465.615846   178.933201   -78.624749 #> Algorithm will terminate if one of following conditions will be met: #> The increase to minus log-likelihood will be bellow chosen value of epsilon 1e-08  #> Maximum change to the vector of regression parameters will be bellow the chosen value of epsilon. #> At current step the highest change was: 11.372388 #> Taking a modified step.... #> Iteration number 1 log-likelihood: -2007.6174 #> Parameter vector:   0.69091287  0.26326159 -1.03420854 -2.59476489  1.84076445  0.12091652 -0.12884159  0.31561786 #> log-likelihood reduction:  90.568444 #> Value of gradient at current step: #>   174.865107  -26.513615  158.337969  -10.824417 -233.596320 -553.952664  129.236794  -26.977372 #> Algorithm will terminate if one of following conditions will be met: #> The increase to minus log-likelihood will be bellow chosen value of epsilon 1e-08  #> Maximum change to the vector of regression parameters will be bellow the chosen value of epsilon. #> At current step the highest change was: 0.35538711 #> ---- #> Iteration number 2 log-likelihood: -24826.724 #> Parameter vector:  -10.32648783   0.58069155  -1.33278511   8.44612934  -4.15796616   1.00010731  -1.62897813   6.40259530 #> log-likelihood reduction:  -22819.107 #> Value of gradient at current step: #>   1952.014020  3736.765638 -1936.872567  -568.841689  -167.743878  -471.534666   180.607498   -83.197848 #> Algorithm will terminate if one of following conditions will be met: #> The increase to minus log-likelihood will be bellow chosen value of epsilon 1e-08  #> Maximum change to the vector of regression parameters will be bellow the chosen value of epsilon. #> At current step the highest change was: 11.040894 #> Taking a modified step.... #> Iteration number 2 log-likelihood: -2007.6174 #> Parameter vector:   0.69091287  0.26326159 -1.03420854 -2.59476489  1.84076445  0.12091652 -0.12884159  0.31561786 #> log-likelihood reduction:  0.00000000000045474735 #> Value of gradient at current step: #>   174.865107  -26.513615  158.337969  -10.824417 -233.596320 -553.952664  129.236794  -26.977372 #> Algorithm will terminate if one of following conditions will be met: #> The increase to minus log-likelihood will be bellow chosen value of epsilon 1e-08  #> Maximum change to the vector of regression parameters will be bellow the chosen value of epsilon. #> At current step the highest change was: 0.00000000000000044408921 #> ---- #> Warning: Convergence at halfstepsize #> Value of analytically computed hessian at fitted regression coefficients: #>             [,1]         [,2]        [,3]       [,4]       [,5]       [,6] #> [1,] -2657.85992  -7217.84982  3584.50587 -142.78323   77.04236  143.27686 #> [2,] -7217.84982 -27619.89450 10288.10240 -417.13512  143.27686  407.88203 #> [3,]  3584.50587  10288.10240 -7892.62858  223.19784  -27.47559  -46.63509 #> [4,]  -142.78323   -417.13512   223.19784 -142.78323   48.89458  101.21679 #> [5,]    77.04236    143.27686   -27.47559   48.89458 -151.58136 -298.78820 #> [6,]   143.27686    407.88203   -46.63509  101.21679 -298.78820 -876.15563 #> [7,]   -27.47559    -46.63509    83.26395  -42.37576   80.04882  147.80742 #> [8,]    48.89458    101.21679   -42.37576   48.89458  -58.24756 -128.05861 #>            [,7]       [,8] #> [1,]  -27.47559   48.89458 #> [2,]  -46.63509  101.21679 #> [3,]   83.26395  -42.37576 #> [4,]  -42.37576   48.89458 #> [5,]   80.04882  -58.24756 #> [6,]  147.80742 -128.05861 #> [7,] -177.00319   60.28389 #> [8,]   60.28389  -58.24756 #> The matrix above has the following eigen values: #>  -20.52098 -36.83832 -110.5987 -171.7599 -520.8088 -1054.241 -3577.607 -34083.78   # extract results  # regression coefficient vector res$beta #> [1]  0.6909129  0.2632616 -1.0342085 -2.5947649  1.8407645  0.1209165 -0.1288416 #> [8]  0.3156179  # compare with actual true coeffictient vector beta #> [1]  1.00  0.20 -0.95 -3.00  2.00  0.00 -0.01  0.30  # number of iterations res$iter #> [1] 2  # working weights head(res$weights) #>            lambda         mixed         mixed        omega #> [1,] 5.701175e-03 -4.935010e-03 -4.935010e-03 4.890802e-03 #> [2,] 5.418062e-04 -1.761896e-06 -1.761896e-06 1.119346e-03 #> [3,] 1.775422e-05 -5.795365e+02 -5.795365e+02 2.358105e-09 #> [4,] 1.918954e-04 -9.317753e-19 -9.317753e-19 1.918738e-04 #> [5,] 7.500023e-04 -3.255879e-05 -3.255879e-05 1.244941e-03 #> [6,] 1.107066e-03 -2.928194e-05 -2.928194e-05 2.030523e-03  # call with another method  res <- estimatePopsize.fit(   y = y, X = X,    method = \"optim\",    priorWeights = 1,    family = ztoipoisson(),    start = beta + rnorm(n = length(beta), sd = .1),    control = controlMethod() ) # extract results  # regression coefficient vector res$beta #> [1]  1.0047375  0.2091686 -0.9434504 -2.9622528  1.1099861 -0.1179092  0.2076011 #> [8]  1.3492576  # compare with actual true coeffictient vector beta #> [1]  1.00  0.20 -0.95 -3.00  2.00  0.00 -0.01  0.30  # number of iterations res$iter #> function gradient  #>      162      162   # optim does not calculated working weights head(res$weights) #> [1] 1"},{"path":"/reference/estimatePopsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Single source capture-recapture models — estimatePopsize","title":"Single source capture-recapture models — estimatePopsize","text":"estimatePopsize first fits appropriate (v)glm model estimates full (observed unobserved) population size. types models assumed response vector (.e. dependent variable) corresponds number times given unit observed source. Population size usually estimated Horvitz-Thompson type estimator: \\[\\hat{N} = \\sum_{k=1}^{N}\\frac{I_{k}}{\\mathbb{P}(Y_{k}>0)} = \\sum_{k=1}^{N_{obs}}\\frac{1}{1-\\mathbb{P}(Y_{k}=0)}\\] \\(I_{k}=I_{Y_{k} > 0}\\) indicator variables, value 1 kth unit observed least 0 otherwise.","code":""},{"path":"/reference/estimatePopsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single source capture-recapture models — estimatePopsize","text":"","code":"estimatePopsize(   formula,   data,   model = c(\"ztpoisson\", \"ztnegbin\", \"ztgeom\", \"zotpoisson\", \"ztoipoisson\",     \"oiztpoisson\", \"ztHurdlepoisson\", \"Hurdleztpoisson\", \"zotnegbin\", \"ztoinegbin\",     \"oiztnegbin\", \"ztHurdlenegbin\", \"Hurdleztnegbin\", \"zotgeom\", \"ztoigeom\", \"oiztgeom\",     \"ztHurdlegeom\", \"ztHurdlegeom\", \"zelterman\", \"chao\"),   weights = NULL,   subset = NULL,   naAction = NULL,   method = c(\"optim\", \"IRLS\", \"maxLik\"),   popVar = c(\"analytic\", \"bootstrap\", \"noEst\"),   controlMethod = NULL,   controlModel = NULL,   controlPopVar = NULL,   modelFrame = TRUE,   x = FALSE,   y = TRUE,   contrasts = NULL,   ... )"},{"path":"/reference/estimatePopsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single source capture-recapture models — estimatePopsize","text":"formula Formula model fitted, applied \"main\" linear predictor. single response models available. data Data frame object coercible data.frame class containing data regression population size estimation. model Model regression population estimate full description singleRmodels(). weights Optional object priori weights used fitting model. subset logical vector indicating observations used regression population size estimation. evaluated data argument provided call. naAction yet implemented. method Method fitting values currently supported: iteratively reweighted least squares (IRLS) maximum likelihood (optim). popVar method constructing confidence interval either analytic bootstrap. Bootstrap confidence interval type may specified controlPopVar. also third possible value noEst skips population size estimate together. controlMethod list indicating parameters use fitting model may constructed singleRcapture::controlMethod function. information included controlMethod(). controlModel list indicating additional formulas regression (like formula inflation parameter/dispersion parameter) may constructed singleRcapture::controlModel function. information eventually included controlModel(). controlPopVar list indicating parameters use estimating variance population size estimation may constructed singleRcapture::controlPopVar function. information included controlPopVar(). modelFrame, x, y Logical value indicating whether return model matrix, dependent vector model matrix part output. contrasts yet implemented. ... Additional optional arguments passed following functions: stats::model.frame -- creating data frame information model specified \"main\" formula. stats::model.matrix -- creating model matrix (lm matrix). estimatePopsize.fit -- possibly picking starting points zero truncated poisson regression.","code":""},{"path":"/reference/estimatePopsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single source capture-recapture models — estimatePopsize","text":"Returns object classes singleRglmlm containing: y -- Vector dependent variable specified function call. X -- Model matrix specified function call. formula -- list formula provided call additional formulas specified controlModel. call -- Call matching original input. coefficients -- vector fitted coefficients regression. control -- list control parameters controlMethod controlModel, controlPopVar included populationSize. model -- Model estimation population size regression built, object class family. deviance -- Deviance model. priorWeights -- Prior weight provided call. weights -- IRLS method estimation chosen weights returned IRLS, otherwise priorWeights. residuals -- Vector raw residuals. logL -- Logarithm likelihood obtained final iteration. iter -- Numbers iterations performed fitting stats::optim used number call loglikelihhod function. dfResiduals -- Residual degrees freedom. dfNull -- Null degrees freedom. fittValues -- Data frame fitted values mu (expected value) lambda (Poisson parameter). populationSize -- list containing information population size estimate. modelFrame -- Model frame specified call. linearPredictors -- Vector fitted linear predictors. trcount -- Number truncated observations. sizeObserved -- Number observations original model frame. terms -- terms attribute model frame used. contrasts -- contrasts specified function call. naAction -- naAction used. -- list indicating observations used regression/population size estimation.","code":""},{"path":"/reference/estimatePopsize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single source capture-recapture models — estimatePopsize","text":"generalized linear model characterised equation \\[\\boldsymbol{\\eta}=\\boldsymbol{X}\\boldsymbol{\\beta}\\] \\(\\boldsymbol{X}\\) (lm) model matrix. vector generalized linear model similarly characterised equations \\[\\boldsymbol{\\eta}_{k}=\\boldsymbol{X}_{k}\\boldsymbol{\\beta}_{k}\\] \\(\\boldsymbol{X}_{k}\\) (lm) model matrix constructed appropriate formula (specified controlModel parameter). \\(\\boldsymbol{\\eta}\\) vector constructed : \\[\\boldsymbol{\\eta}=\\begin{pmatrix}\\boldsymbol{\\eta}_{1}^{T} & \\boldsymbol{\\eta}_{2}^{T} & \\dotso & \\boldsymbol{\\eta}_{p}^{T}\\end{pmatrix}^{T}\\] (vlm) model matrix constructed block matrix: \\[\\boldsymbol{X}_{vlm}= \\begin{pmatrix} \\boldsymbol{X}_{1} & \\boldsymbol{0} &\\dotso &\\boldsymbol{0}\\cr \\boldsymbol{0} & \\boldsymbol{X}_{2} &\\dotso &\\boldsymbol{0}\\cr \\vdots & \\vdots & \\ddots & \\vdots\\cr \\boldsymbol{0} & \\boldsymbol{0} &\\dotso &\\boldsymbol{X}_{p} \\end{pmatrix}\\] differs convention VGAM package just convention affect model, convention taken makes fitting IRLS (explanation algorithm estimatePopsize.fit()) algorithm easier. package use observed likelihood fit regression models. mentioned aboce usually population size estimation done via: \\[\\hat{N} = \\sum_{k=1}^{N}\\frac{I_{k}}{\\mathbb{P}(Y_{k}>0)} = \\sum_{k=1}^{N_{obs}}\\frac{1}{1-\\mathbb{P}(Y_{k}=0)}\\] \\(I_{k}=I_{Y_{k} > 0}\\) indicator variables, value 1 k'th unit observed least 0 otherwise. \\(\\mathbb{P}(Y_{k}>0)\\) estimated maximum likelihood. following assumptions usually present using method estimation described : specified regression model correct. entails linear relationship independent variables dependent ones dependent variable generated appropriate distribution. unobserved heterogeneity. assumption broken possible (admittedly imperfect) workarounds see details singleRmodels(). population size constant relevant time frame. Depending confidence interval construction (asymptotic) normality \\(\\hat{N}\\) statistic assumed. two ways estimating variance estimate \\(\\hat{N}\\), first \"analytic\" usually done application law total variance \\(\\hat{N}\\): \\[\\text{var}(\\hat{N})=\\mathbb{E}\\left(\\text{var} \\left(\\hat{N}|I_{1},\\dots,I_{n}\\right)\\right)+ \\text{var}\\left(\\mathbb{E}(\\hat{N}|I_{1},\\dots,I_{n})\\right)\\] \\(\\delta\\) method \\(\\hat{N}|I_{1},\\dotso I_{N}\\): \\[\\mathbb{E}\\left(\\text{var} \\left(\\hat{N}|I_{1},\\dots,I_{n}\\right)\\right)= \\left.\\left(\\frac{\\partial(N|I_1,...,I_N)}{\\partial\\boldsymbol{\\beta}}\\right)^{T} \\text{cov}\\left(\\boldsymbol{\\beta}\\right) \\left(\\frac{\\partial(N|I_1,...,I_N)}{\\partial\\boldsymbol{\\beta}}\\right) \\right|_{\\boldsymbol{\\beta}=\\hat{\\boldsymbol{\\beta}}}\\] \\(\\text{var}\\left(\\mathbb{E}(\\hat{N}|I_{1},\\dots,I_{n})\\right)\\) term may derived analytically (assume independence observations) since \\(\\hat{N}|I_{1},\\dots,I_{n}\\) just constant. general gives us: \\[ \\begin{aligned} \\text{var}\\left(\\mathbb{E}(\\hat{N}|I_{1},\\dots,I_{n})\\right)&= \\text{var}\\left(\\sum_{k=1}^{N}\\frac{I_{k}}{\\mathbb{P}(Y_{k}>0)}\\right)\\cr &=\\sum_{k=1}^{N}\\text{var}\\left(\\frac{I_{k}}{\\mathbb{P}(Y_{k}>0)}\\right)\\cr &=\\sum_{k=1}^{N}\\frac{1}{\\mathbb{P}(Y_{k}>0)^{2}}\\text{var}(I_{k})\\cr &=\\sum_{k=1}^{N}\\frac{1}{\\mathbb{P}(Y_{k}>0)^{2}}\\mathbb{P}(Y_{k}>0)(1-\\mathbb{P}(Y_{k}>0))\\cr &=\\sum_{k=1}^{N}\\frac{1}{\\mathbb{P}(Y_{k}>0)}(1-\\mathbb{P}(Y_{k}>0))\\cr &\\approx\\sum_{k=1}^{N}\\frac{I_{k}}{\\mathbb{P}(Y_{k}>0)^{2}}(1-\\mathbb{P}(Y_{k}>0))\\cr &=\\sum_{k=1}^{N_{obs}}\\frac{1-\\mathbb{P}(Y_{k}>0)}{\\mathbb{P}(Y_{k}>0)^{2}} \\end{aligned} \\] approximation 6th line appears 5th line sum units, includes unobserved units, since \\(I_{k}\\) independent \\(I_{k}\\sim b(\\mathbb{P}(Y_{k}>0))\\) 6th line unbiased estimator 5th line. method estimating variance \"bootstrap\", since \\(N_{obs}=\\sum_{k=1}^{N}I_{k}\\) also random variable bootstrap simple just drawing \\(N_{obs}\\) units data replacement just computing \\(\\hat{N}\\). Method described refered literature \"nonparametric\" bootstrap (see controlPopVar()), due ignoring variability observed sample size likely underestimate variance. sophisticated bootstrap procedure may described follows: Compute probability distribution : \\[\\frac{\\hat{\\boldsymbol{f}}_{0}}{\\hat{N}}, \\frac{\\boldsymbol{f}_{1}}{\\hat{N}}, \\dotso, \\frac{\\boldsymbol{f}_{\\max{y}}}{\\hat{N}}\\] \\(\\boldsymbol{f}_{n}\\) denotes observed marginal frequency units observed exactly n times, round quantitites nearest integer necessary. Draw \\(\\hat{N}\\) units distribution (\\(\\hat{N}\\) integer draw \\(\\lfloor\\hat{N}\\rfloor + b(\\hat{N}-\\lfloor\\hat{N}\\rfloor)\\)). Truncated units \\(y=0\\). covariates draw original data replacement uniform distribution. example unit drawn new data \\(y=2\\) choose one covariate vectors original data associated unit observed 2 times. Regress \\(\\boldsymbol{y}_{new}\\) \\(\\boldsymbol{X}_{vlm new}\\) obtain \\(\\hat{\\boldsymbol{\\beta}}_{new}\\), starting point \\(\\hat{\\boldsymbol{\\beta}}\\) make slightly faster, use compute \\(\\hat{N}_{new}\\). Repeat 2-5 unit least B statistics obtained. Compute confidence intervals based alpha confType specified controlPopVar(). procedure known literature \"semiparametric\" bootstrap necessary assume correct estimate \\(\\hat{N}\\) order use type bootstrap. Lastly \"paramteric\" bootstrap assume probabilistic model used obtain \\(\\hat{N}\\) correct bootstrap procedure may described : Draw \\(\\hat{N}\\) covariate information vectors replacement data according probability distribution \\[\\frac{\\lfloor N_{k}\\rfloor + M_{k}}{\\lfloor\\hat{N}\\rfloor}\\] \\(M_{k}\\sim b(N_{k}-\\lfloor N_{k}\\rfloor)\\), \\(N_{k}\\) contribution kth unit .e. \\(\\frac{I_{k}}{\\mathbb{P}(Y_{k}>0)}\\) \\(\\lfloor \\cdot\\rfloor\\) floor function. Determine \\(\\boldsymbol{\\eta}\\) matrix using estimate \\(\\hat{\\boldsymbol{\\beta}}\\). Generate \\(\\boldsymbol{y}\\) (dependent variable) vector using \\(\\boldsymbol{\\eta}\\) probability mass function associated chosen model. Truncated units \\(y=0\\) construct \\(\\boldsymbol{y}_{new}\\) \\(\\boldsymbol{X}_{vlm new}\\). Regress \\(\\boldsymbol{y}_{new}\\) \\(\\boldsymbol{X}_{vlm new}\\) obtain \\(\\hat{\\boldsymbol{\\beta}}_{new}\\) use compute \\(\\hat{N}_{new}\\). Repeat 1-5 unit least B statistics obtained. Compute confidence intervals based alpha confType specified controlPopVar() also worth noting \"analytic\" method estimatePopsize uses \"standard\" covariance matrix estimation. possible improper covariance matrix estimate part estimation assumptions violated. cases post-hoc procedures implemented package address issue. Lastly confidence intervals \\(\\hat{N}\\) computed (analytic case) either assuming follows normal distribution variable \\(\\ln(N-\\hat{N})\\) follows normal distribution. estimates may found using either summary.singleR method popSizeEst.singleR function. labelled Studentized Logtransform respectively.","code":""},{"path":"/reference/estimatePopsize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Single source capture-recapture models — estimatePopsize","text":"General single source capture recapture literature: Zelterman, Daniel (1988). ‘Robust estimation truncated discrete distributions application capture-recapture experiments’. : Journal statistical planning inference 18.2, pp. 225–237. Heijden, Peter GM van der et al. (2003). ‘Point interval estimation population size using truncated Poisson regression model’. : Statistical Modelling 3.4, pp. 305–322. doi: 10.1191/1471082X03st057oa. Cruyff, Maarten J. L. F. Peter G. M. van der Heijden (2008). ‘Point Interval Estimation Population Size Using Zero-Truncated Negative Binomial Regression Model’. : Biometrical Journal 50.6, pp. 1035–1050. doi: 10.1002/bimj.200810455 Böhning, Dankmar Peter G. M. van der Heijden (2009). ‘covariate adjustment zero-truncated approaches estimating size hidden elusive populations’. : Annals Applied Statistics 3.2, pp. 595–610. doi: 10.1214/08-AOAS214. Böhning, Dankmar, Alberto Vidal-Diez et al. (2013). ‘Generalization Chao’s Estimator Covariate Information’. : Biometrics 69.4, pp. 1033– 1042. doi: 10.1111/biom.12082 Böhning, Dankmar Peter G. M. van der Heijden (2019). ‘identity zero-truncated, one-inflated likelihood zero-one-truncated likelihood general count densities application drink-driving Britain’. : Annals Applied Statistics 13.2, pp. 1198–1211. doi: 10.1214/18-AOAS1232. Navaratna WC, Del Rio Vilas VJ, Böhning D. Extending Zelterman's approach robust estimation population size zero-truncated clustered Data. Biom J. 2008 Aug;50(4):584-96. doi: 10.1002/bimj.200710441. Böhning D. equivalence one-inflated zero-truncated zero-truncated one-inflated count data likelihoods. Biom J. 2022 Aug 15. doi: 10.1002/bimj.202100343. Böhning, D., Friedl, H. Population size estimation based upon zero-truncated, one-inflated sparse count data. Stat Methods Appl 30, 1197–1217 (2021). doi: 10.1007/s10260-021-00556-8 Bootstrap: Zwane, PGM EN Van der Heijden, Implementing parametric bootstrap capture-recapture models continuous covariates 2003 Statistics & probability letters 65.2 pp 121-125 Norris, James L Pollock, Kenneth H Including model uncertainty estimating variances multiple capture studies 1996 Environmental Ecological Statistics 3.3 pp 235-244 Vector generalised linear models: Yee, T. W. (2015). Vector Generalized Linear Additive Models: Implementation R. New York, USA: Springer. ISBN 978-1-4939-2817-0.","code":""},{"path":[]},{"path":"/reference/estimatePopsize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Single source capture-recapture models — estimatePopsize","text":"Piotr Chlebicki, Maciej Beręsewicz","code":""},{"path":"/reference/estimatePopsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single source capture-recapture models — estimatePopsize","text":"","code":"if (FALSE) { # Model from 2003 publication  # Point and interval estimation of the # population size using the truncated Poisson regression mode # Heijden, Peter GM van der et al. (2003) model <- estimatePopsize(formula = capture ~ gender + age + nation,  data = netherlandsimmigrant, model = ztpoisson) summary(model) # Graphical presentation of model fit plot(model, \"rootogram\") # Statistical test summary(marginalFreq(model), df = 1)  modelSingleRcapture <- estimatePopsize(formula = TOTAL_SUB ~ .,  data = farmsubmission, model = ztnegbin, method = \"IRLS\") # comparison with VGAM package, VGAM uses slightly different parametrisation # so we use negloglink instead of loglink for size parameter # i.e 1 / dispersion parameter if (require(VGAM)) {   modelVGAM <- vglm(formula = TOTAL_SUB ~ .,    family = posnegbinomial(lsize = negloglink()),    data = farmsubmission)   summary(modelVGAM) } # Results are comparable summary(modelSingleRcapture) summary(marginalFreq(modelSingleRcapture))  # More advanced call that specifies additional formula and shows # in depth information about fitting procedure pseudoHurdleModel <- estimatePopsize(formula = capture ~ nation + age + gender,  data = netherlandsimmigrant, model = Hurdleztgeom,  method = \"IRLS\", controlMethod = controlMethod(verbose = 5),  controlModel = controlModel(piFormula = ~ gender)) summary(pseudoHurdleModel) # very good fit may be a little over fitted plot(pseudoHurdleModel, \"rootogram\") summary(marginalFreq(pseudoHurdleModel), dropl5 = \"group\", # Group cells  # with low frequencies instead of dropping them. df = 1)   # A advanced input with additional information for fitting procedure and # additional formula specification. Model <- estimatePopsize(formula = TOTAL_SUB ~ ., data = farmsubmission,  model = oiztgeom, method = \"IRLS\", controlMethod = controlMethod( verbose = 5, stepsize = .2, momentumFactor = 1.1, epsilon = 1e-12,  silent = TRUE), controlModel = controlModel(omegaFormula = ~ .)) summary(marginalFreq(Model), df = 18 - length(Model$coefficients) - 1) }"},{"path":"/reference/farmsubmission.html","id":null,"dir":"Reference","previous_headings":"","what":"British farm submissions data — farmsubmission","title":"British farm submissions data — farmsubmission","text":"Data British animal farms submissions AHVLA. British farms able submit samples AHVLA cause death animal determined private veterinary surgeon decides submit , unless notifiable disease suspected submission required. data set contains information farms. submissions farms included data frame carcasses also blood samples etc.","code":""},{"path":"/reference/farmsubmission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"British farm submissions data — farmsubmission","text":"","code":"data(\"farmsubmission\")"},{"path":"/reference/farmsubmission.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"British farm submissions data — farmsubmission","text":"Data frame 12,036 rows 4 columns. TOTAL_SUB Number submissions animal material. log_size Numerical value equal logarithm size farm. log_distance Numerical value equal logarith distance nearest AHVLA center. C_TYPE Factor describing type activity farm animals used . Either Dairy Beef","code":""},{"path":"/reference/farmsubmission.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"British farm submissions data — farmsubmission","text":"data set description provided publication: Böhning, D., Vidal Diez, ., Lerdsuwansri, R., Viwatwongkasem, C., Arnold, M. (2013). \"generalization Chao's estimator covariate information\". Biometrics, 69(4), 1033-1042. doi:10.1111/biom.12082","code":""},{"path":"/reference/hatvalues.singleR.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagonal elements of the projection matrix — hatvalues.singleR","title":"Diagonal elements of the projection matrix — hatvalues.singleR","text":"method singleR class extracting diagonal elementrs projection matrix.","code":""},{"path":"/reference/hatvalues.singleR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagonal elements of the projection matrix — hatvalues.singleR","text":"","code":"# S3 method for singleR hatvalues(model, ...)"},{"path":"/reference/hatvalues.singleR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagonal elements of the projection matrix — hatvalues.singleR","text":"model Object singleR class. ... Currently nothing.","code":""},{"path":"/reference/hatvalues.singleR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagonal elements of the projection matrix — hatvalues.singleR","text":"matrix n rows p columns n number observations data k number regression parameters.","code":""},{"path":"/reference/hatvalues.singleR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diagonal elements of the projection matrix — hatvalues.singleR","text":"Since singleRcapture contains regular glm's also vglm's hatvalues returns matrix number columns corresponding number linear predictors model, kth column corresponds elements diagonal projection matrix associated kth linear predictor. glm's \\[\\boldsymbol{W}^{\\frac{1}{2}}\\boldsymbol{X}\\left(\\boldsymbol{X}^{T}\\boldsymbol{W}\\boldsymbol{X}\\right)^{-1}\\boldsymbol{X}^{T}\\boldsymbol{W}^{\\frac{1}{2}}\\] \\(\\boldsymbol{W}=\\mathbb{E}\\left(\\text{Diag}\\left(\\frac{\\partial^{2}\\ell}{\\partial\\boldsymbol{\\eta}^{T}\\partial\\boldsymbol{\\eta}}\\right)\\right)\\) \\(\\boldsymbol{X}\\) model (lm) matrix. vglm's instead : \\[\\boldsymbol{X}_{vlm}\\left(\\boldsymbol{X}_{vlm}^{T}\\boldsymbol{W}\\boldsymbol{X}_{vlm}\\right)^{-1}\\boldsymbol{X}_{vlm}^{T}\\boldsymbol{W}\\] \\[ \\boldsymbol{W} = \\mathbb{E}\\left(\\begin{bmatrix} \\text{Diag}(\\frac{\\partial^{2}\\ell}{\\partial\\eta_{1}^{T}\\partial\\eta_{1}}) & \\text{Diag}(\\frac{\\partial^{2}\\ell}{\\partial\\eta_{1}^{T}\\partial\\eta_{2}}) & \\dotso & \\text{Diag}(\\frac{\\partial^{2}\\ell}{\\partial\\eta_{1}^{T}\\partial\\eta_{p}})\\cr \\text{Diag}(\\frac{\\partial^{2}\\ell}{\\partial\\eta_{2}^{T}\\partial\\eta_{1}}) & \\text{Diag}(\\frac{\\partial^{2}\\ell}{\\partial\\eta_{2}^{T}\\partial\\eta_{2}}) & \\dotso & \\text{Diag}(\\frac{\\partial^{2}\\ell}{\\partial\\eta_{2}^{T}\\partial\\eta_{p}})\\cr \\vdots & \\vdots & \\ddots & \\vdots\\cr \\text{Diag}(\\frac{\\partial^{2}\\ell}{\\partial\\eta_{p}^{T}\\partial\\eta_{1}}) & \\text{Diag}(\\frac{\\partial^{2}\\ell}{\\partial\\eta_{p}^{T}\\partial\\eta_{2}}) & \\dotso & \\text{Diag}(\\frac{\\partial^{2}\\ell}{\\partial\\eta_{p}^{T}\\partial\\eta_{p}}) \\end{bmatrix}\\right)\\] block matrix constructed taking expected  value diagonal matrixes corresponding second derivatives respect linear predictor (mixed derivatives) \\(\\boldsymbol{X}_{vlm}\\) model (vlm) matrix constructed using \"main\" formula additional formulas specified controlModel.","code":""},{"path":"/reference/marginalFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Observed and fitted marginal Frequencies — marginalFreq","title":"Observed and fitted marginal Frequencies — marginalFreq","text":"function given fitted singleR class object computed marginal frequencies sum probability density functions unit data point .e. kth element marginal frequency table given \\(\\sum_{j=1}^{N_{obs}}\\mathbb{P}(Y_{j}=k| \\eta_{j})\\). k=0 (specified call) computed \\(\\hat{N}-N_{obs}\\) \\(\\boldsymbol{f}_{0}\\) assumed unobserved part studied population. frequencies useful diagnostics count data regression, assessment fit.","code":""},{"path":"/reference/marginalFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observed and fitted marginal Frequencies — marginalFreq","text":"","code":"marginalFreq(   object,   includeones = TRUE,   includezeros = TRUE,   onecount = NULL,   range )"},{"path":"/reference/marginalFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observed and fitted marginal Frequencies — marginalFreq","text":"object Object singleR class. includeones Logical value indicating whether include estimated number zero counts. includezeros Logical value indicating whether include one counts zero-one truncated models. onecount numeric value indicating number one counts null trcount object assumed number one counts. range Optional argument specifying range selected Y values.","code":""},{"path":"/reference/marginalFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Observed and fitted marginal Frequencies — marginalFreq","text":"list observed name fitted model family degrees freedom observed fitted marginal frequencies.","code":""},{"path":"/reference/marginalFreq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Observed and fitted marginal Frequencies — marginalFreq","text":"Piotr Chlebicki","code":""},{"path":"/reference/netherlandsimmigrant.html","id":null,"dir":"Reference","previous_headings":"","what":"Data on immigration in Netherlands — netherlandsimmigrant","title":"Data on immigration in Netherlands — netherlandsimmigrant","text":"data set contains information immigrants four cities (Amsterdam, Rotterdam, Hague Utrecht) Netherlands staying country illegally 1995 appeared police records year.","code":""},{"path":"/reference/netherlandsimmigrant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data on immigration in Netherlands — netherlandsimmigrant","text":"","code":"data(\"netherlandsimmigrant\")"},{"path":"/reference/netherlandsimmigrant.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data on immigration in Netherlands — netherlandsimmigrant","text":"Data frame 1,880 rows 5 columns. capture Number times person captured police. gender Factor describing gender apprehended person. age Factor describing age apprehended person. Either bellow 40 years old. reason Factor describing reason apprehended police either illegal stay Netherlands reasons. nation Factor nation origin captured person. 6 levels variable: \"American Australia\",   \"Asia\", \"North Africa\", \"Rest Africa\", \"Surinam\", \"Turkey\".","code":""},{"path":"/reference/netherlandsimmigrant.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data on immigration in Netherlands — netherlandsimmigrant","text":"data set description provided publication: van Der Heijden, P. G., Bustami, R., Cruyff, M. J., Engbersen, G., Van Houwelingen, H. C. (2003). Point interval estimation population size using truncated Poisson regression model. Statistical Modelling, 3(4), 305-322. doi:10.1191/1471082X03st057oa","code":""},{"path":"/reference/plot.singleR.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic plots for regression and population size estimation. — plot.singleR","title":"Diagnostic plots for regression and population size estimation. — plot.singleR","text":"Simple diagnostic plots singleR class objects.","code":""},{"path":"/reference/plot.singleR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic plots for regression and population size estimation. — plot.singleR","text":"","code":"# S3 method for singleR plot(   x,   plotType = c(\"qq\", \"marginal\", \"fitresid\", \"bootHist\", \"rootogram\", \"dfpopContr\",     \"dfpopBox\", \"scaleLoc\", \"cooks\", \"hatplot\", \"strata\"),   confIntStrata = c(\"normal\", \"logNormal\"),   ... )"},{"path":"/reference/plot.singleR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic plots for regression and population size estimation. — plot.singleR","text":"x Object singleR class. plotType Character parameter specifying type plot made. following list presents briefly explains possible type plots: qq -- quantile-quantile plot pearson residuals (standardised pearson residuals available model) .e. empirical quantiles residuals plotted theoretical quantiles standard distribution. marginal -- plot made matplot fitted observed marginal frequencies labels. fitresid -- Plot fitted linear predictors (standardised) pearson residuals. bootHist -- Simple histogram statistics obtained bootstraping (one performed statistics saved). rootogram -- Rootogram, full explanation see: Kleiber Zeileis Visualizing Count Data Regressions Using Rootograms (2016), short barplot height square root observed marginal frequencies adjusted difference square root observed fitted marginal frequencies connected line representing fitted marginal frequencies. less difference 0 line beginning bar accurate fitt produced model. dfpopContr -- Plot dfpopsize unit contribution. plot y = x line .e. deletion effect removing unit model effect regression coefficients. away observation line influential . dfpopBox -- Boxplot dfpopsize getting general idea distribution \"influence\" unit population size estimate. scaleLoc -- scale - location plot .e. square root absolute values (standardised) pearson residuals linear predictors column linear predictors. cooks -- Plot cooks distance detecting influential observations. hatplot -- Plot hat values linear predictor detecting influential observations. strata -- Plot confidence invervals point estimates stratas provided ... argument confIntStrata Confidence interval type use strata plot. Currently supported values \"normal\" \"logNormal\". ... Additional optional arguments passed following functions: plotType = \"bootHist\" graphics::hist -- x, main, xlab, ylab parameters fixed. plotType = \"rootogram\" graphics::barplot -- height, offset, ylab, xlab, ylim parameters fixed. graphics::lines -- x, y, pch, type, lwd, col parameters fixed. plotType = \"dfpopContr\" dfpopsize -- model, observedPop parameters fixed. plot.default -- x, y, xlab, main parameters fixed. plotType = \"dfpopBox\" dfpopsize -- model, observedPop parameters fixed. graphics::boxplot -- x, ylab, main parameters fixed. plotType = \"scaleLoc\" plot.default -- x, y, xlab, ylab, main, sub parameters fixed. plotType = \"fitresid\" plot.default -- x, y, xlab, ylab, main, sub parameters fixed. plotType = \"cooks\" plot.default -- x, xlab, ylab, main parameters fixed. plotType = \"hatplot\" hatvalues.singleR plot.default -- x, xlab, ylab, main parameters fixed. , plotType = \"strata\" stratifyPopsize.singleR","code":""},{"path":"/reference/plot.singleR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic plots for regression and population size estimation. — plot.singleR","text":"return value plot made.","code":""},{"path":[]},{"path":"/reference/plot.singleR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Diagnostic plots for regression and population size estimation. — plot.singleR","text":"Piotr Chlebicki","code":""},{"path":"/reference/popSizeEst.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract population size estimation results. — popSizeEst","title":"Extract population size estimation results. — popSizeEst","text":"extractor function singleR method extracting important information regarding pop size estimate.","code":""},{"path":"/reference/popSizeEst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract population size estimation results. — popSizeEst","text":"","code":"popSizeEst(object, ...)  # S3 method for singleR popSizeEst(object, ...)"},{"path":"/reference/popSizeEst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract population size estimation results. — popSizeEst","text":"object Object population size estimates. ... Additional optional arguments, currently used singleR class method.","code":""},{"path":"/reference/popSizeEst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract population size estimation results. — popSizeEst","text":"object class popSizeEstResults containing population size estimation results.","code":""},{"path":"/reference/redoPopEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Updating population size estimation results. — redoPopEstimation","title":"Updating population size estimation results. — redoPopEstimation","text":"function applies post-hoc procedures taken (heteroscedastic consistent covariance matrix estimation bias reduction) population size estimation standard error estimation.","code":""},{"path":"/reference/redoPopEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updating population size estimation results. — redoPopEstimation","text":"","code":"redoPopEstimation(object, ...)  # S3 method for singleR redoPopEstimation(object, cov = NULL, ...)"},{"path":"/reference/redoPopEstimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updating population size estimation results. — redoPopEstimation","text":"object Object update population size estimation results done. ... Additional optional arguments, currently used singleR class method. cov updated covariance matrix estimate.","code":""},{"path":"/reference/redoPopEstimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updating population size estimation results. — redoPopEstimation","text":"object class popSizeEstResults containing updated population size estimation results.","code":""},{"path":"/reference/redoPopEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updating population size estimation results. — redoPopEstimation","text":"","code":"# Create simple model Model <- estimatePopsize(formula = capture ~ nation + gender,  data = netherlandsimmigrant,  model = ztpoisson,  method = \"IRLS\") # Apply heteroscedasticity consistent covariance matrix estimation require(sandwich) cov <- vcovHC(Model, type = \"HC3\") summary(Model, cov = cov, popSizeEst = redoPopEstimation(Model, cov = cov)) #>  #> Call: #> estimatePopsize(formula = capture ~ nation + gender, data = netherlandsimmigrant,  #>     model = ztpoisson, method = \"IRLS\") #>  #> Pearson Residuals: #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -0.479668 -0.479668 -0.351833  0.000449 -0.225717 14.058858  #>  #> Coefficients: #> ----------------------- #> For linear predictors associated with: lambda  #>                      Estimate Std. Error z value  P(>|z|)     #> (Intercept)           -1.3977     0.2553  -5.475 4.37e-08 *** #> nationAsia            -1.0560     0.3940  -2.680  0.00736 **  #> nationNorth Africa     0.2327     0.2399   0.970  0.33200     #> nationRest of Africa  -0.8864     0.3514  -2.523  0.01164 *   #> nationSurinam         -2.3519     1.0273  -2.289  0.02205 *   #> nationTurkey          -1.6845     0.6110  -2.757  0.00583 **  #> gendermale             0.3833     0.2014   1.904  0.05695 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> AIC: 1718.993 #> BIC: 1757.766 #> Residual deviance: 1136.645 #>  #> Log-likelihood: -852.4963 on 1873 Degrees of freedom  #> Number of iterations: 8 #> ----------------------- #> Population size estimation results:  #> Point estimate 11879.92 #> Observed proportion: 15.8% (N obs = 1880) #> Std. Error 2531.196 #> 95% CI for the population size: #>           lowerBound upperBound #> normal      6918.872   16840.98 #> logNormal   8015.862   18177.38 #> 95% CI for the share of observed population: #>           lowerBound upperBound #> normal      11.16325   27.17206 #> logNormal   10.34252   23.45350 # Compare to results with usual covariance matrix estimation summary(Model) #>  #> Call: #> estimatePopsize(formula = capture ~ nation + gender, data = netherlandsimmigrant,  #>     model = ztpoisson, method = \"IRLS\") #>  #> Pearson Residuals: #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -0.479668 -0.479668 -0.351833  0.000449 -0.225717 14.058858  #>  #> Coefficients: #> ----------------------- #> For linear predictors associated with: lambda  #>                      Estimate Std. Error z value  P(>|z|)     #> (Intercept)           -1.3977     0.2146  -6.514 7.33e-11 *** #> nationAsia            -1.0560     0.3016  -3.501 0.000464 *** #> nationNorth Africa     0.2327     0.1939   1.200 0.230002     #> nationRest of Africa  -0.8864     0.3009  -2.946 0.003224 **  #> nationSurinam         -2.3519     1.0137  -2.320 0.020337 *   #> nationTurkey          -1.6845     0.6029  -2.794 0.005203 **  #> gendermale             0.3833     0.1630   2.352 0.018686 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> AIC: 1718.993 #> BIC: 1757.766 #> Residual deviance: 1136.645 #>  #> Log-likelihood: -852.4963 on 1873 Degrees of freedom  #> Number of iterations: 8 #> ----------------------- #> Population size estimation results:  #> Point estimate 11879.92 #> Observed proportion: 15.8% (N obs = 1880) #> Std. Error 2448.792 #> 95% CI for the population size: #>           lowerBound upperBound #> normal      7080.380   16679.47 #> logNormal   8111.333   17927.69 #> 95% CI for the share of observed population: #>           lowerBound upperBound #> normal      11.27134   26.55225 #> logNormal   10.48657   23.17745"},{"path":"/reference/singleRmodels.html","id":null,"dir":"Reference","previous_headings":"","what":"Family functions in singleRcapture package — chao","title":"Family functions in singleRcapture package — chao","text":"Package singleRcapture utilises various family type functions specify variable parts population size estimation, regression, diagnostics necessary information depends model. functions used model argument estimatePopsize function.","code":""},{"path":"/reference/singleRmodels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Family functions in singleRcapture package — chao","text":"","code":"chao(...)  Hurdleztgeom(...)  Hurdleztpoisson(...)  oiztgeom(...)  oiztpoisson(...)  zelterman(...)  zotgeom(...)  zotnegbin(nSim = 1000, epsSim = 1e-08, ...)  zotpoisson(...)  ztHurdlegeom(...)  ztHurdlepoisson(...)  ztgeom(...)  ztnegbin(nSim = 1000, epsSim = 1e-08, ...)  ztoigeom(...)  ztoipoisson(...)  ztpoisson(...)"},{"path":"/reference/singleRmodels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Family functions in singleRcapture package — chao","text":"... Additional arguments, used now. nSim working weights computed analytically argument specifies maximum number simulations allowed find numerically. epsSim f working weights computed analytically argument specifies precision level finding numerically.","code":""},{"path":"/reference/singleRmodels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Family functions in singleRcapture package — chao","text":"object class family containing objects: makeMinusLogLike -- factory function creating \\(\\ell(\\boldsymbol{\\beta}), \\frac{\\partial\\ell}{\\partial\\boldsymbol{\\beta}}, \\frac{\\partial^{2}\\ell}{\\partial\\boldsymbol{\\beta}^{T}\\partial\\boldsymbol{\\beta}} \\) functions \\(\\boldsymbol{y}\\) vector \\(\\boldsymbol{X}_{vlm}\\) (just \\(\\boldsymbol{X}\\) applied model single linear predictor) argument deriv possible values 0, 1, 2 provides derivative return 0 just minus log-likelihood. linkfun, linkinv -- link function inverse. mu.eta, variance -- Functions linear predictors return expected value variance. type argument 2 possible values \"trunc\" \"nontrunc\" specifies whether return \\(\\mathbb{E}(Y|Y>0), \\text{var}(Y|Y>0\\) \\(\\mathbb{E}Y, \\text{var}(Y)\\) respectively. link, family -- Character specifying link functions used model internally used name model. valideta, validmu -- now returns true. near future used check whether applied linear predictors valid (.e. transormed elements parameter space subjected inverse link function). funcZ, Wfun -- Functions create pseudo residuals working weights used IRLS algorithm. devResids -- Function given linear predictors prior weights vector response vector returns deviance residuals. family functions functions implemented yet. pointEst, popVar -- Functions given prior weights linear predictors later case also estimation \\(\\text{cov}(\\hat{\\boldsymbol{\\beta}})\\) \\(\\boldsymbol{X_vlm}\\) matrix return point estimate population size analytic estimation variance. additional boolean parameter contr former function set true returns contribution unit. etaNames, parNum -- Names number linear predictors. densityFunction -- function given linear predictors returns value PMF values x. Additional argument type spedifies whether return \\(\\mathbb{P}(Y|Y>0)\\) \\(\\mathbb{P}(Y)\\). simulate -- function generates values dependent vector given linear predictors.","code":""},{"path":"/reference/singleRmodels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Family functions in singleRcapture package — chao","text":"functions based \"base\" distribution support \\(\\mathbb{N}_{0}=\\mathbb{N}\\cup{0}\\) describe distribution \\(Y\\) truncation. Currently include: \\[\\mathbb{P}(Y=y|\\lambda,\\alpha)=\\left\\lbrace \\begin{array}{cc} \\frac{\\lambda^{y}e^{-\\lambda}}{y!}    & \\text{poisson distribution}  \\cr \\frac{\\Gamma(y+\\alpha^{-1})}{\\Gamma(\\alpha^{-1})y!}  \\left(\\frac{\\alpha^{-1}}{\\alpha^{-1}+\\lambda}\\right)^{\\alpha^{-1}} \\left(\\frac{\\lambda}{\\alpha^{-1}+\\lambda}\\right)^{y} &  \\text{negative binomial distribution} \\cr \\frac{\\lambda^{y}}{(1+\\lambda)^{y+1}} &  \\text{geometric distribution} \\end{array} \\right.\\] \\(\\lambda\\) poisson parameter \\(\\alpha\\) dispersion parameter. Geometric distribution special case negative binomial distribution \\(\\alpha=1\\) included negative binomial distribution quite troublesome numerical regression fitting. important know PMF negative binomial distribution approaches PMF poisson distribution \\(\\alpha\\rightarrow 0^{+}\\). Note literature single source capture recapture models dispersion parameter introduces greater variability negative binomial distribution compared poisson distribution generally interpreted explaining unobserved heterogeneity .e. presence important unobserved independent variables. methods estimating population size tied poisson processes hence use \\(\\lambda\\) parameter symbol instead \\(\\mu\\) emphasize connection. Also hard see estimators derived modifying \"base\" distribution unbiased assumptions made respective models violated. zero truncated models corresponding \"base\" distributions characterised relation: \\[\\mathbb{P}(Y=y|Y>0)=\\left\\lbrace \\begin{array}{cc} \\frac{\\mathbb{P}(Y=y)}{1-\\mathbb{P}(Y=0)} & \\text{}y\\neq 0 \\cr 0 & \\text{}y=0 \\end{array}\\right.\\] allows us estimate parameter values using observed part population. models lead following estimates: \\[ \\begin{aligned} \\hat{N} &= \\sum_{k=1}^{N_{obs}}\\frac{1}{1-\\exp(-\\lambda_{k})} &\\text{ poisson distribution} \\cr \\hat{N} &= \\sum_{k=1}^{N_{obs}}\\frac{1}{1-(1+\\alpha_{k}\\lambda_{k})^{-\\alpha_{k}^{-1}}} &\\text{ negative binomial distribution} \\cr \\hat{N} &= \\sum_{k=1}^{N_{obs}}\\frac{1+\\lambda_{k}}{\\lambda_{k}} &\\text{ geometric distribution} \\end{aligned} \\] One common way assumptions zero truncated models violated presence one inflation presence somewhat similar single source capture-recapture models zero inflation usual count data analysis. two ways one inflation may understood, relate whether \\(\\mathbb{P}(Y=0)\\) modified inflation. first approach inflate (\\(\\omega\\) parameter) zero truncated distribution : \\[ \\mathbb{P}_{new}(Y=y|Y>0) = \\left\\lbrace\\begin{array}{cc} \\omega + (1 - \\omega)\\mathbb{P}_{old}(Y=1|Y>0)& \\text{: } y = 1 \\cr (1 - \\omega) \\mathbb{P}_{old}(Y=y|Y>0) & \\text{: } y \\neq 1 \\end{array}\\right. \\] corresponds : \\[ \\mathbb{P}_{new}(Y=y) = \\left\\lbrace\\begin{array}{cc} \\mathbb{P}_{old}(Y=0) & \\text{: } y = 0 \\cr \\omega(1 - \\mathbb{P}(Y=0)) + (1 - \\omega)\\mathbb{P}_{old}(Y=1) & \\text{: } y = 1 \\cr (1 - \\omega) \\mathbb{P}_{old}(Y=y) & \\text{: } y > 1 \\end{array}\\right. \\] zero truncation. Models utilise approach commonly referred zero truncated one inflated models. Another way accommodating one inflation SSCR putting inflation parameter base distribution : \\[ \\mathbb{P}_{new}(Y=y) = \\left\\lbrace\\begin{array}{cc} \\omega + (1 - \\omega)\\mathbb{P}_{old}(Y=1)& \\text{: } y = 1 \\cr (1 - \\omega) \\mathbb{P}_{old}(Y=y) & \\text{: } y \\neq 1 \\end{array}\\right. \\] wchich becomes: \\[ \\mathbb{P}_{new}(Y=y|Y>0) = \\left\\lbrace\\begin{array}{cc} \\frac{\\omega}{1 - (1-\\omega)\\mathbb{P}_{old}(Y=0)} + \\frac{(1 - \\omega)}{1 - (1-\\omega)\\mathbb{P}_{old}(Y=0)}\\mathbb{P}_{old}(Y=1)& \\text{: } y = 1 \\cr \\frac{(1 - \\omega)}{1 - (1-\\omega)\\mathbb{P}_{old}(Y=0)}\\mathbb{P}_{old}(Y=y) & \\text{: } y > 1 \\end{array}\\right. \\] truncation. shown Böhning 2022 paper approaches equivalent terms maximising likelihoods put formula \\(\\omega\\). can however lead different population size estimates. zero truncated one inflated models formula population size estimate \\(\\hat{N}\\) change since \\(\\mathbb{P}(y=0)\\) remains estimation parameters changes calculations. one inflated zero truncated models population size estimates expressed : \\[ \\begin{aligned} \\hat{N} &= \\sum_{k=1}^{N_{obs}}\\frac{1}{1-(1-\\omega_{k})\\exp(-\\lambda_{k})} &\\text{ base poisson distribution} \\cr \\hat{N} &= \\sum_{k=1}^{N_{obs}}\\frac{1}{1-(1-\\omega_{k})(1+\\alpha_{k}\\lambda_{k})^{-\\alpha_{k}^{-1}}} &\\text{ base negative binomial distribution} \\cr \\hat{N} &= \\sum_{k=1}^{N_{obs}}\\frac{1+\\lambda_{k}}{\\lambda_{k} + \\omega_{k}} &\\text{ base geometric distribution} \\end{aligned} \\] Zero one truncated models ignore one counts instead accommodating one inflation utilising identity \\[ \\ell_{\\text{ztoi}}=\\boldsymbol{f}_{1}\\ln{\\frac{\\boldsymbol{f}_{1}}{N_{obs}}} +(N_{obs}-\\boldsymbol{f}_{1})\\ln{\\left(1-\\frac{\\boldsymbol{f}_{1}}{N_{obs}} \\right)} + \\ell_{\\text{zot}} \\] \\(\\ell_{\\text{zot}}\\) log likelihood zero one truncated distribution characterised probability mass function: \\[\\mathbb{P}(Y=y|Y>1)=\\left\\lbrace \\begin{array}{cc} \\frac{\\mathbb{P}(Y=y)}{1-\\mathbb{P}(Y=0)-\\mathbb{P}(Y=1)} & \\text{}y > 1 \\cr 0 & \\text{}y\\\\lbrace 0, 1\\rbrace \\end{array}\\right.\\] \\(\\mathbb{P}(Y)\\) probability mass function \"base\" distribution. identity justifies use zero one truncated, unfortunately proven intercept models, however numerical simulations seem indicate even theorem extended (non trivial) regression population size estimation still possible. zero one truncated models population size estimates expressed : \\[ \\begin{aligned} \\hat{N} &= \\boldsymbol{f}_{1} + \\sum_{k=1}^{N_{obs}}\\frac{1-\\lambda_{k}\\exp(-\\lambda_{k})}{1-\\exp(-\\lambda_{k})-\\lambda_{k}\\exp(-\\lambda_{k})} &\\text{ base poisson distribution} \\cr \\hat{N} &= \\boldsymbol{f}_{1} + \\sum_{k=1}^{N_{obs}}\\frac{1-\\lambda_{k}(1+\\alpha_{k}\\lambda_{k})^{-1-\\alpha_{k}^{-1}}}{1-(1+\\alpha_{k}\\lambda_{k})^{-\\alpha_{k}^{-1}}-\\lambda_{k}(1+\\alpha_{k}\\lambda_{k})^{-1-\\alpha_{k}^{-1}}} &\\text{ base negative binomial distribution} \\cr \\hat{N} &= \\boldsymbol{f}_{1} + \\sum_{k=1}^{N_{obs}}\\frac{\\lambda_{k}^{2}+\\lambda_{k}+1}{\\lambda_{k}^{2}} &\\text{ base geometric distribution} \\end{aligned} \\] Pseudo hurdle models experimental yet described literature. Lastly chao zelterman models based logistic regression dummy variable \\[ Z = \\left\\lbrace\\begin{array}{cc} 0     & \\text{}Y = 1  \\cr 1     & \\text{}Y = 2 \\end{array}\\right.\\] based equation: \\[ \\text{logit}(p_{k})= \\ln\\left(\\frac{\\lambda_{k}}{2}\\right)= \\boldsymbol{\\beta}\\mathbf{x}_{k}=\\eta_{k}\\] \\(\\lambda_{k}\\) poisson parameter. zelterman estimator population size expressed : \\[ \\hat{N}=\\sum_{k=1}^{N_{obs}}{1-\\exp\\left(-\\lambda_{k}\\right)} \\] chao estimator form: \\[ \\hat{N}=N_{obs}+\\sum_{k=1}^{\\boldsymbol{f}_{1}+\\boldsymbol{f}_{2}} \\frac{1}{\\lambda_{k}+ \\frac{\\lambda_{k}^{2}}{2}} \\]","code":""},{"path":[]},{"path":"/reference/singleRmodels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Family functions in singleRcapture package — chao","text":"Piotr Chlebicki, Maciej Beręsewicz","code":""},{"path":"/reference/stratifyPopsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate size of sub populations. — stratifyPopsize","title":"Estimate size of sub populations. — stratifyPopsize","text":"function estimates sizes specific sub populations based capture-recapture model whole population.","code":""},{"path":"/reference/stratifyPopsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate size of sub populations. — stratifyPopsize","text":"","code":"stratifyPopsize(object, stratas, alpha, ...)  # S3 method for singleR stratifyPopsize(object, stratas, alpha, cov = NULL, ...)"},{"path":"/reference/stratifyPopsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate size of sub populations. — stratifyPopsize","text":"object object population size estimates based singleRcapture package fitter singleR class object. stratas specification sub populations either : formula -- formula applied model.frame extracted object . Logical vector number entries equal number rows dataset. (named) list element logical vector, names list used specify names variable returned object. Vector names explanatory variables. singleR method function specification stratas parameter result every level explanatory variable sub population variable specified. value provided singleR method function create sub populations based levels factor variables model.frame. alpha Significance level confidence intervals -- Either single numeric value vector length equal number sub populations specified stratas. missing set .05 singleR method. ... vector arguments passed functions. singleR method functions arguments ... passed either cov argument provided function vcov cov argument missing call.  cov singleR method estimate variance-covariance matrix estimate regression parameters. possible pass function example sandwich::vcovHC called : foo(object, ...) user may specify additional arguments function ... argument. provided estimate covariance matrix set calling appropriate vcov method.","code":""},{"path":"/reference/stratifyPopsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate size of sub populations. — stratifyPopsize","text":"data.frame object row names names specified sub populations either provided inferred.","code":""},{"path":"/reference/stratifyPopsize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate size of sub populations. — stratifyPopsize","text":"single source capture-recapture models frequently used estimate population size Horwitz-Thompson type estimate: \\[\\hat{N} = \\sum_{k=1}^{N}\\frac{I_{k}}{\\mathbb{P}(Y_{k}>0)} = \\sum_{k=1}^{N_{obs}}\\frac{1}{1-\\mathbb{P}(Y_{k}=0)}\\] \\(I_{k}=I_{Y_{k} > 0}\\) indicator variables, value 1 kth unit observed least 0 otherwise inverse probabilistic weights weights units observed data \\(\\tfrac{1}{\\mathbb{P}(Y_{k}>0)}\\) estimated using fitted linear predictors. estimates different sub populations made changing \\(I_{k}=I_{Y_{k} > 0}\\) indicator variables refer population whole sub populations considered .e. changing values 1 0 kth unit member sub population considered moment. estimation variance estimates estimation variance estimate population size whole population follow relation one described .","code":""},{"path":[]},{"path":"/reference/summary.singleR.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics for model of singleR class. — summary.singleR","title":"Summary statistics for model of singleR class. — summary.singleR","text":"summary method singleR class, works analogically summary.glm includes population size estimation results. additional statistics, confidence intervals coefficients coefficient correlation, specified printed.","code":""},{"path":"/reference/summary.singleR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics for model of singleR class. — summary.singleR","text":"","code":"# S3 method for singleR summary(   object,   test = c(\"t\", \"z\"),   resType = \"pearson\",   correlation = FALSE,   confint = FALSE,   cov,   popSizeEst,   ... )"},{"path":"/reference/summary.singleR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistics for model of singleR class. — summary.singleR","text":"object Object singleR class. test Type test significance parameters \"t\" t-test \"z\" normal approximation students t distribution, default \"z\" used 30 degrees freedom \"t\" used cases. resType Type residuals summarise value allowed residuals.signleR except \"\" allowed. default pearson residuals used. correlation Logical value indicating whether correlation matrix computed covariance matrix default FALSE. confint Logical value indicating whether confidence intervals regression parameters constructed. default FALSE. cov Covariance matrix corresponding regression parameters. possible give cov argument function object. specified constructed using vcov.singleR method. (.e using Cramer-Rao lower bound) popSizeEst popSizeEstResults class object. specified population size estimation results drawn object. post-hoc procedures, sandwich covariance matrix estimation bias reduction, taken possible include population size estimation results calling redoPopEstimation. ... Additional optional arguments passed following functions: vcov.singleR -- cov argument provided. cov -- cov parameter specified call function. confint.singleR -- confint parameter set TRUE function call. particular possible set confidence level ....","code":""},{"path":"/reference/summary.singleR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary statistics for model of singleR class. — summary.singleR","text":"object summarysingleR class containing: call -- call created object. coefficients -- dataframe estimated regression coefficients summary statistics standard error wald test statistic p value wald test. residuals -- vector residuals type specified call. aic -- Akaike's informsation criterion. bic -- Bayesian (Schwarz's) information criterion. iter -- Number iterations taken fitting regression. logL -- Logarithm likelihood function evaluated coefficients. deviance -- Residual deviance. populationSize -- Object population size estimation results. dfResidual -- Residual degrees freedom. sizeObserved -- Size observed population. correlation -- Correlation matrix correlation parameter set TRUE test -- Type statistical test performed. model -- Family class object specified call object. skew -- bootstrap sample saved contains estimate skewness.","code":""},{"path":[]},{"path":"/reference/summary.singleRmargin.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical tests of goodness of fit. — summary.singleRmargin","title":"Statistical tests of goodness of fit. — summary.singleRmargin","text":"Performs two statistical test observed fitted marginal frequencies. G test test statistic computed :   \\[G = 2\\sum_{k}O_{k}\\ln{\\left(\\frac{O_{k}}{E_{k}}\\right)}\\] \\(\\chi^{2}\\) test statistic computed : \\[\\chi^{2} = \\sum_{k}\\frac{\\left(O_{k}-E_{k}\\right)^{2}}{E_{k}}\\] \\(O_{k},E_{k}\\) denoted observed fitted frequencies respectively. statistics converge \\(\\chi^2\\) distribution asymptotically degrees freedom. convergence \\(G, \\chi^2\\) statistics \\(\\chi^2\\) distribution may violated expected counts cells low, say < 5, customary either censor omit cells.","code":""},{"path":"/reference/summary.singleRmargin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical tests of goodness of fit. — summary.singleRmargin","text":"","code":"# S3 method for singleRmargin summary(object, df, dropl5 = c(\"drop\", \"group\", \"no\"), ...)"},{"path":"/reference/summary.singleRmargin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical tests of goodness of fit. — summary.singleRmargin","text":"object Object singleRmargin class. df Degrees freedom provided function try manually always possible. dropl5 character indicating treatment cells frequencies < 5 either grouping , droping leaving . Defaults drop. ... Currently nothing.","code":""},{"path":"/reference/summary.singleRmargin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistical tests of goodness of fit. — summary.singleRmargin","text":"chi squared test G test comparison fitted observed marginal frequencies.","code":""},{"path":"/reference/summary.singleRmargin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistical tests of goodness of fit. — summary.singleRmargin","text":"","code":"# Create a simple model Model <- estimatePopsize(formula = capture ~ .,  data = netherlandsimmigrant,  model = ztpoisson,  method = \"IRLS\") plot(Model, \"rootogram\")  # We see a considerable lack of fit summary(marginalFreq(Model), df = 1, dropl5 = \"group\") #> Test for Goodness of fit of a regression model: #>  #>                  Test statistics df P(>X^2) #> Chi-squared test           50.06  1 1.5e-12 #> G-test                     34.31  1 4.7e-09 #>  #> --------------------------------------------------------------  #> Cells with fitted frequencies of < 5 have been grouped  #> Names of cells used in calculating test(s) statistic: 1 2 3"},{"path":"/reference/vcov.singleR.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Covariance Matrix estimation. — vcov.singleR","title":"Obtain Covariance Matrix estimation. — vcov.singleR","text":"vcov method singleR class.","code":""},{"path":"/reference/vcov.singleR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Covariance Matrix estimation. — vcov.singleR","text":"","code":"# S3 method for singleR vcov(object, type = c(\"Fisher\", \"observedInform\"), ...)"},{"path":"/reference/vcov.singleR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Covariance Matrix estimation. — vcov.singleR","text":"object Object singleR class. type Type estimate covariance matrix now either expected (Fisher) information matrix observed information matrix. ... Additional optional arguments passed following functions: solve -- inverting information matrixes. model.frame.singleR -- creation Xvlm matrix.","code":""},{"path":"/reference/vcov.singleR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Covariance Matrix estimation. — vcov.singleR","text":"covariance matrix fitted coefficients, rows columns correspond parameters returned coef method.","code":""},{"path":"/reference/vcov.singleR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain Covariance Matrix estimation. — vcov.singleR","text":"Returns estimated covariance matrix model coefficients calculated analytic hessian Fisher information matrix. Covariance type taken control parameter provided call created object argumetns type specified.","code":""},{"path":[]},{"path":"/reference/vcovHC.singleR.html","id":null,"dir":"Reference","previous_headings":"","what":"Heteroscedasticity-Consistent Covariance Matrix Estimation for singleR class — vcovHC.singleR","title":"Heteroscedasticity-Consistent Covariance Matrix Estimation for singleR class — vcovHC.singleR","text":"S3 method vcovHC handle singleR class objects. Works exactly like vcov.default difference method handles vector generalised linear models. Updating covariance matrix variance/standard error estimation population size estimator can done via redoPopEstimation()","code":""},{"path":"/reference/vcovHC.singleR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heteroscedasticity-Consistent Covariance Matrix Estimation for singleR class — vcovHC.singleR","text":"","code":"# S3 method for singleR vcovHC(   x,   type = c(\"HC3\", \"const\", \"HC\", \"HC0\", \"HC1\", \"HC2\", \"HC4\", \"HC4m\", \"HC5\"),   omega = NULL,   sandwich = TRUE,   ... )"},{"path":"/reference/vcovHC.singleR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heteroscedasticity-Consistent Covariance Matrix Estimation for singleR class — vcovHC.singleR","text":"x fitted singleR class object. type character string specifying estimation type, sandwich::vcovHC.default. HC3 default value. omega vector function depending arguments residuals (.e. derivative log-likelihood respect linear predictor), diaghat (diagonal corresponding hat matrix) df (residual degrees freedom), sandwich::vcovHC.default. sandwich logical. sandwich estimator computed? set FALSE meat matrix returned. sandwich::vcovHC() ... additional optional arguments passed following functions: estfun -- empirical estimating functions. hatvalues -- diagonal elements projection matrix. sandwich -- sandwich argument function call set TRUE.","code":""},{"path":"/reference/vcovHC.singleR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heteroscedasticity-Consistent Covariance Matrix Estimation for singleR class — vcovHC.singleR","text":"Variance-covariance matrix estimation corrected heteroscedasticity regression errors.","code":""},{"path":[]},{"path":"/reference/vcovHC.singleR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Heteroscedasticity-Consistent Covariance Matrix Estimation for singleR class — vcovHC.singleR","text":"Piotr Chlebicki, Maciej Beręsewicz","code":""},{"path":"/reference/vcovHC.singleR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heteroscedasticity-Consistent Covariance Matrix Estimation for singleR class — vcovHC.singleR","text":"","code":"set.seed(1) N <- 10000 gender <- rbinom(N, 1, 0.2) eta <- -1 + 0.5*gender counts <- rpois(N, lambda = exp(eta)) df <- data.frame(gender, eta, counts) df2 <- subset(df, counts > 0) mod1 <-  estimatePopsize(formula = counts ~ 1 + gender, data = df2,  model = \"ztpoisson\", method = \"optim\", popVar = \"analytic\") require(sandwich) HC <- sandwich::vcovHC(mod1, type = \"HC4\") Fisher <- vcov(mod1, \"Fisher\") # variance covariance matrix obtained from  #Fisher (expected) information matrix HC #>             (Intercept)       gender #> (Intercept)  0.00201216 -0.002012160 #> gender      -0.00201216  0.004790297 Fisher #>              (Intercept)       gender #> (Intercept)  0.002022145 -0.002022145 #> gender      -0.002022145  0.004881858 # usual results summary(mod1) #>  #> Call: #> estimatePopsize(formula = counts ~ 1 + gender, data = df2, model = \"ztpoisson\",  #>     method = \"optim\", popVar = \"analytic\") #>  #> Pearson Residuals: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> -0.5503 -0.4267 -0.4267  0.0000 -0.4267  6.2261  #>  #> Coefficients: #> ----------------------- #> For linear predictors associated with: lambda  #>             Estimate Std. Error z value  P(>|z|)     #> (Intercept) -1.01346    0.04497 -22.537  < 2e-16 *** #> gender       0.50288    0.06987   7.197 6.14e-13 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> AIC: 3990.538 #> BIC: 4002.804 #> Residual deviance: 2386.29 #>  #> Log-likelihood: -1993.269 on 3403 Degrees of freedom  #> Number of calls to log-likelihood function: 30 #> ----------------------- #> Population size estimation results:  #> Point estimate 10146.02 #> Observed proportion: 33.6% (N obs = 3405) #> Std. Error 341.7288 #> 95% CI for the population size: #>           lowerBound upperBound #> normal      9476.239   10815.79 #> logNormal   9508.827   10849.72 #> 95% CI for the share of observed population: #>           lowerBound upperBound #> normal      31.48175   35.93198 #> logNormal   31.38330   35.80883 # updated results summary(mod1, cov = HC, popSizeEst = redoPopEstimation(mod1, cov = HC)) #>  #> Call: #> estimatePopsize(formula = counts ~ 1 + gender, data = df2, model = \"ztpoisson\",  #>     method = \"optim\", popVar = \"analytic\") #>  #> Pearson Residuals: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> -0.5503 -0.4267 -0.4267  0.0000 -0.4267  6.2261  #>  #> Coefficients: #> ----------------------- #> For linear predictors associated with: lambda  #>             Estimate Std. Error z value  P(>|z|)     #> (Intercept) -1.01346    0.04486 -22.593  < 2e-16 *** #> gender       0.50288    0.06921   7.266 3.71e-13 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> AIC: 3990.538 #> BIC: 4002.804 #> Residual deviance: 2386.29 #>  #> Log-likelihood: -1993.269 on 3403 Degrees of freedom  #> Number of calls to log-likelihood function: 30 #> ----------------------- #> Population size estimation results:  #> Point estimate 10146.02 #> Observed proportion: 33.6% (N obs = 3405) #> Std. Error 340.7903 #> 95% CI for the population size: #>           lowerBound upperBound #> normal      9478.079   10813.95 #> logNormal   9510.490   10847.69 #> 95% CI for the share of observed population: #>           lowerBound upperBound #> normal      31.48710   35.92500 #> logNormal   31.38916   35.80257"},{"path":[]},{"path":"/news/index.html","id":"singlercapture-0132--ntts","dir":"Changelog","previous_headings":"","what":"singleRcapture 0.1.3.2 – NTTS","title":"singleRcapture 0.1.3.2 – NTTS","text":"Added function implements population size estimates stratas warnings fitting options control functions Corrected/implemented deviance residuals models Now whole package uses cammelCase Performance upgrades Corrected miss calculated moments Change exported data factors actually factors just characters Removed unused dependency Added automated R-cmd check","code":""},{"path":"/news/index.html","id":"singlercapture-0131","dir":"Changelog","previous_headings":"","what":"singleRcapture 0.1.3.1","title":"singleRcapture 0.1.3.1","text":"Basically documentation redone now features important theory SSCR methods information (v)glms Added checks positivity working weights matrixes stabilise \"IRLS\" algorithm S3 method vcovHC implemented vcovCL work singleR class objects work \"HC0\" \"HC1\" type argument values Basic version function redoPopEstimation updating population size estimation post-hoc procedures implemented popSizeEst function extracting population size estimation results implemented Minor improvements memory usage made computation speed little Changed names mle robust fitting methods optim IRLS respectively bugfixes warnings messages estimate_popsize.fit","code":""},{"path":"/news/index.html","id":"singlercapture-013","dir":"Changelog","previous_headings":"","what":"singleRcapture 0.1.3","title":"singleRcapture 0.1.3","text":"Multiple new models IRLS generalised distributions multiple parameters bugfixes QOL improvements extended bootstrap methods new models","code":""},{"path":"/news/index.html","id":"singlercapture-012","dir":"Changelog","previous_headings":"","what":"singleRcapture 0.1.2","title":"singleRcapture 0.1.2","text":"control parameters model control parameters regression bootstrap sampling leave one diagnostics popsize regression parameters (dfbetas corrected) fixes Goodness fit tests zero one truncated models computational improvements IRLS small bugfixes","code":""},{"path":"/news/index.html","id":"singlercapture-011","dir":"Changelog","previous_headings":"","what":"singleRcapture 0.1.1","title":"singleRcapture 0.1.1","text":"tiny tests fixes marginal frequencies Deviance implemented dfbetas levarage matrix Parametric bootstraps work correctly part just polishing left ","code":""},{"path":"/news/index.html","id":"singlercapture-010","dir":"Changelog","previous_headings":"","what":"singleRcapture 0.1.0","title":"singleRcapture 0.1.0","text":"first version package released","code":""}]
